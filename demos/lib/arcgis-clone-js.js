var arcgis_clone_js =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./dist/umd/arcgis-clone.umd.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./dist/umd/arcgis-clone.umd.js":
/*!**************************************!*\
  !*** ./dist/umd/arcgis-clone.umd.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* @preserve\n* arcgis-clone-js - v0.4.0 - Apache-2.0\n* Copyright (c) 2018-2019 Esri, Inc.\n* Sun Feb 03 2019 07:52:25 GMT-0800 (Pacific Standard Time)\n*/\n(function (global, factory) {\n   true ? factory(exports) :\n  undefined;\n}(this, (function (exports) { 'use strict';\n\n  /*    Copyright (c) 2017-2019 Esri Inc.\n     Licensed under the Apache License, Version 2.0 (the \"License\");\n     you may not use this file except in compliance with the License.\n     You may obtain a copy of the License at\n         http://www.apache.org/licenses/LICENSE-2.0\n     Unless required by applicable law or agreed to in writing, software\n     distributed under the License is distributed on an \"AS IS\" BASIS,\n     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     See the License for the specific language governing permissions and\n     limitations under the License. */\n\n  /**\n   * Return the value of a deep property, using a path.\n   */\n  const getWithDefault = (obj, path, defaultValue = undefined) => path\n    .split('.')\n    .reduce((o, p) => o ? o[p] : defaultValue, obj);\n\n  /*    Copyright (c) 2017-2019 Esri Inc.\n     Licensed under the Apache License, Version 2.0 (the \"License\");\n     you may not use this file except in compliance with the License.\n     You may obtain a copy of the License at\n         http://www.apache.org/licenses/LICENSE-2.0\n     Unless required by applicable law or agreed to in writing, software\n     distributed under the License is distributed on an \"AS IS\" BASIS,\n     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     See the License for the specific language governing permissions and\n     limitations under the License. */\n\n  /**\n   * Simply Map over the props of an object\n   */\n  function mapValues (obj, fn) {\n    let keys = Object.keys(obj);\n    // console.info(`keys: ${keys}`);\n    var newObject = keys.reduce(function(acc, currentKey) {\n      // console.log(`   acc: ${JSON.stringify(acc)} curKey: ${currentKey}`);\n      acc[currentKey] = fn(obj[currentKey], currentKey, obj);\n      return acc;\n    }, {});\n    // console.info(`  output: ${JSON.stringify(newObject)}`);\n    return newObject;\n  }\n\n  /*    Copyright (c) 2017-2019 Esri Inc.\n     Licensed under the Apache License, Version 2.0 (the \"License\");\n     you may not use this file except in compliance with the License.\n     You may obtain a copy of the License at\n         http://www.apache.org/licenses/LICENSE-2.0\n     Unless required by applicable law or agreed to in writing, software\n     distributed under the License is distributed on an \"AS IS\" BASIS,\n     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     See the License for the specific language governing permissions and\n     limitations under the License. */\n\n  const isDate = (v) => v instanceof Date;\n\n  const isFunction = (v) => typeof v === 'function';\n\n  const isObject = (v) => typeof v === 'object';\n\n  const isRegExp = (v) => v instanceof RegExp;\n\n  function deepMapValues(object, callback, propertyPath) {\n    propertyPath = propertyPath || '';\n    if(Array.isArray(object)){\n      return object.map(deepMapValuesIteratee);\n    }\n    else if(object && isObject(object) && !isDate(object) && !isRegExp(object) && !isFunction(object)){\n      return Object.assign({}, object, mapValues(object, deepMapValuesIteratee));\n    }\n    else {\n      let output = callback(object, propertyPath);\n      return output;\n    }\n\n    function deepMapValuesIteratee(value, key){\n      var valuePath = propertyPath ? propertyPath + '.' + key : key;\n      return deepMapValues(value, callback, valuePath);\n    }\n  }\n\n  /*    Copyright (c) 2017-2019 Esri Inc.\n     Licensed under the Apache License, Version 2.0 (the \"License\");\n     you may not use this file except in compliance with the License.\n     You may obtain a copy of the License at\n         http://www.apache.org/licenses/LICENSE-2.0\n     Unless required by applicable law or agreed to in writing, software\n     distributed under the License is distributed on an \"AS IS\" BASIS,\n     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     See the License for the specific language governing permissions and\n     limitations under the License. */\n\n  const isObject$1 = (v) => typeof v === 'object';\n\n  /**\n   * Trim a tree decorated with `{{delete:NNN}}`\n   */\n  function arborist (object, propertyPath) {\n    propertyPath = propertyPath || '';\n\n    if(Array.isArray(object)){\n      // filter out any nulls...\n      let arrResults = object.map(iteratee).filter((entry) => {\n        // need to ensure entry is actually NULL vs just falsey\n        return entry !== null && entry !== undefined;\n      });\n      return pruneArray(arrResults);\n\n    } if(object && isObject$1(object) ) {\n\n      return pruneObject(mapValues(object, iteratee));\n\n    } else {\n\n      return getPropertyValue(object, propertyPath);\n    }\n\n    function iteratee(value, key){\n      var valuePath = propertyPath ? propertyPath + '.' + key: key;\n      return arborist(value, valuePath);\n    }\n  }\n\n  /**\n   * Prune an array\n   * For all the entries in the array...\n   *    if the entry is a naked string and contains `{{delete:NNN}}`\n   *      get maximum NNN value\n   *    then\n   *      if maxN === 0\n   *        return an empty array\n   *      if maxN > 0\n   *        return `{{delete:maxN-1}}`\n   *    else\n   *      return array\n   */\n  function pruneArray (arrResults) {\n    let res = arrResults;\n    // is any entry a string w/ {{delete}}?\n    let maxLevel = arrResults.reduce((maxLevel, e) => {\n      if (isString(e) && hasDelete(e)) {\n        let lvl = getLevel(e);\n        if (lvl > maxLevel) {\n          maxLevel = lvl;\n        }\n      }\n      return maxLevel;\n    }, -1);\n\n    if (maxLevel > -1) {\n      if (maxLevel === 0) {\n        res = [];\n      } else {\n        res = `{{delete:${maxLevel - 1}}}`;\n      }\n    }\n\n    return res;\n  }\n\n\n  function pruneObject (objResults) {\n    // console.log(`   pruneObject:: working on ${JSON.stringify(objResults)}`);\n    let startVal = {obj: {}, maxLevel: -1 };\n    let res;\n    // cook a new clone object, and track the maxLevel\n    let reduction = Object.keys(objResults).reduce((acc, key) => {\n      let val = objResults[key];\n      if (isString(val) && hasDelete(val)) {\n        let lvl = getLevel(val);\n        if (lvl > acc.maxLevel) {\n          acc.maxLevel = lvl;\n        }\n      } else {\n        // only add the prop if it's not a `{{delete:NNN}}`\n        acc.obj[key] = val;\n      }\n      return acc;\n    }, startVal);\n    // if -1, we return entire object...\n    // if 0 we just remove the prop...\n    // if 1 we return undefined...\n    // if > 1 we return the deleteVal\n    if (reduction.maxLevel > 0 ) {\n      if (reduction.maxLevel === 1) {\n        res = undefined;\n      } else {\n        res = `{{delete:${reduction.maxLevel - 1}}}`;\n      }\n    } else {\n      res = reduction.obj;\n    }\n\n    // console.log(`     returning ${JSON.stringify(res)}`);\n    return res;\n  }\n\n  /**\n   * Get a value for a property, handling the `{{delete:NNN}}` syntax\n   */\n  function getPropertyValue (val){\n    let output = val;\n\n    if (typeof val === 'string') {\n      if (hasDelete(val)) {\n        output = getDeleteValue(val);\n      }\n    }\n    return output;\n  }\n\n  /**\n   * Given a string with `{{delete:NNN}}`\n   * if NNN === 0 return undefined\n   * else return `{{delete:NNN - 1}}`\n   */\n  function getDeleteValue (val) {\n    let output = val;\n    let level = getLevel(val);\n    if (level === 0) {\n      output = undefined;\n    } else {\n      output = `{{delete:${level}}}`;\n    }\n    return output;\n  }\n\n  /**\n   * Extract the level from a `{{delete:NNN}}`\n   */\n  const getLevel = (value) => parseInt(value.replace(/{|}/g, '').split(':')[1]);\n\n  /**\n   * Simple check if a value has `{{delete` in it\n   */\n  function hasDelete (value) {\n    if (value && typeof value === 'string') {\n      return value.indexOf('{{delete') > -1;\n    } else {\n      return false;\n    }\n  }\n\n  const isString = (v) => typeof v === 'string';\n\n  /*   Copyright (c) 2017-2019 Esri Inc.\n     Licensed under the Apache License, Version 2.0 (the \"License\");\n     you may not use this file except in compliance with the License.\n     You may obtain a copy of the License at\n         http://www.apache.org/licenses/LICENSE-2.0\n     Unless required by applicable law or agreed to in writing, software\n     distributed under the License is distributed on an \"AS IS\" BASIS,\n     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     See the License for the specific language governing permissions and\n     limitations under the License. */\n\n  /**\n   * Optional Transform\n   * Supports a declarative syntax for optional template properties\n   *\n   * {{some.object.key:optional:2}}\n   *\n   * In this example, if defined, the value of `some.object.key` is used.\n   * If not defined, then the optional transform is utilized\n   * and a post-processing step is executed which will remove two parent levels\n   * from the output structure\n   */\n\n  function optionalTransform(key, value, settings, level = 0) {\n    // console.log(`optional: ${key}, ${value}, ${level}`);\n    let val = value;\n    if (!value) {\n      val = `{{delete:${level}}}`;\n    }\n    return val;\n  }\n\n  /*    Copyright (c) 2017-2019 Esri Inc.\n     Licensed under the Apache License, Version 2.0 (the \"License\");\n     you may not use this file except in compliance with the License.\n     You may obtain a copy of the License at\n         http://www.apache.org/licenses/LICENSE-2.0\n     Unless required by applicable law or agreed to in writing, software\n     distributed under the License is distributed on an \"AS IS\" BASIS,\n     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     See the License for the specific language governing permissions and\n     limitations under the License. */\n  const HANDLEBARS = /{{\\s*?[\\w].*?}}/g;\n\n  const isString$1 = (v) => typeof v === 'string';\n\n  function _swap(parameter, settings, transforms) {\n    let value;\n    // console.info(`_swap: param: ${parameter}`);\n    // Parameters can optionally call transform functions\n    // e.g. \"{{ipsum:translateLatin}}\"\n    // so extract {{<parameter>:<transformFunction>:<key||value>}}\n    let transformCheck = parameter.split(':');\n    if (transformCheck.length > 1) {\n      // we have a request to use a transform...\n      let key = transformCheck[0];\n      let fn = transformCheck[1];\n      // we default to using the value...\n      let param = null;\n      if (transformCheck[2]){\n        param = transformCheck[2];\n      }\n      if(transforms && transforms[fn] && typeof transforms[fn] === 'function') {\n        // get the value from the param\n        value = getWithDefault(settings, key);\n        // transform it...\n        value = transforms[fn](key, value, settings, param);\n      } else {\n        throw new Error(`Attempted to apply non-existant transform ${fn} on ${key} with params ${parameter}`);\n      }\n    } else {\n      // we just get the value\n      value = getWithDefault(settings, parameter);\n    }\n    return value;\n  }\n\n  /**\n   * Does a propertyPath exist on a target\n   */\n  function _propertyPathExists (propertyPath, target) {\n    // remove any transforms\n    let cleanPath = propertyPath.split(':')[0];\n    let value = getWithDefault(target, cleanPath, null);\n    if (value !== null && value !== undefined) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // Combine a Template with Settings\n  function adlib (template, settings, transforms = null) {\n    transforms = transforms || {};\n    if (transforms.optional) {\n      throw new Error('Please do not pass in an `optional` transform; adlib provides that internally.');\n    } else {\n      transforms.optional = optionalTransform;\n    }\n\n    let res = deepMapValues(template, function(templateValue, templatePath){\n      // Only string templates\n      if (!isString$1(templateValue)) {\n        return templateValue;\n      }\n\n      // When we match \"{{layer.fields..}}\"\n      var settingsValue;\n\n      let hbsEntries = templateValue.match(HANDLEBARS);\n\n      if (hbsEntries && hbsEntries.length) {\n        // console.log(`Got a ${hbsEntries.length} handlebar entries...`);\n        let isStaticValue = false;\n        // iterate over the entries...\n        let values = hbsEntries.map((entry) => {\n          // console.info(`Matched ${entry}...`);\n          // strip off the curlies and trim any leading/trailing whitespace...\n          let path = entry.replace(/{|}/g, '').trim();\n          // check for || which indicate a hiearchy\n          if (path.indexOf('||') > -1) {\n            var paths = path.split('||').map(path => path.trim());\n            let numberOfPaths = paths.length;\n            // here we check each option, in order, and return the first with a value in the hash, OR the last\n            path = paths.find((pathOption, idx) => {\n              // console.info(`Checking to see if ${pathOption} is in settings hash...`);\n              let exists = _propertyPathExists(pathOption, settings);\n              if (!exists) {\n                if ((idx + 1) === numberOfPaths) {\n                  // console.info(`Got to last entry, and still did not find anything... assuming ${pathOption} is a static value...`);\n                  isStaticValue = true;\n                  // check if we can convert this into a number...\n                  if (!isNaN(pathOption)) {\n                    pathOption = parseInt(pathOption);\n                  }\n                  return pathOption;\n                } else {\n                  return false;\n                }\n              } else {\n                return pathOption;\n              }\n            });\n          }\n          // setup the return value...\n          let result = {\n            key: entry,\n            value: path\n          };\n          // if we have a valid object path, value comes from _swap\n          if (!isStaticValue) {\n            result.value = _swap(path, settings, transforms) || entry;\n          }\n          // console.info(`Value: ${JSON.stringify(result)}`);\n          return result;\n        });\n\n        values.forEach((v) => {\n          // console.log(`Comparing ${templateValue} with ${v.key}`)\n          if (templateValue === v.key) {\n            // console.log(`template matches key, returning ${v.value}`);\n            // if the value is a string...\n            if (typeof v.value === 'string') {\n              // and it's numeric-ish\n              if(!isNaN(v.value)) {\n                // and has a . in it...\n                if (v.value.indexOf('.') > -1) {\n                  // parse as a float...\n                  v.value = parseFloat(v.value);\n                } else {\n                  // parse as an int\n                  v.value = parseInt(v.value);\n                }\n              }\n            }\n            settingsValue = v.value;\n          } else {\n            // a little extra regex dance to match the '||' because '|'\n            // is a Very Special Regex Character and we need to super\n            // escape them for the regex to work\n            // console.log(`KEY ${v.key}`);\n            // console.log(`TEMPLATE ${templateValue}`);\n            templateValue = templateValue.replace(v.key, v.value);\n            // console.log(`template did not match key, interpolating value ${v.value} into template to produce ${templateValue}`);\n          }\n        });\n\n        // if we have a value, let's return that...\n        if (settingsValue) {\n          // console.log(`We found a value so we return it ${settingsValue}`);\n          return settingsValue;\n        } else {\n          // console.log(`We did not find a value so we return the template ${templateValue}`);\n          // but if we don't, lets return the template itself\n          return templateValue;\n        }\n      } else {\n        // console.log(`We did not find a hbs match, so we return the template ${templateValue}`);\n        // no match, return the templateValue...\n        return templateValue;\n      }\n    });\n    return arborist(res);\n  }\n\n  /*! *****************************************************************************\r\n  Copyright (c) Microsoft Corporation. All rights reserved.\r\n  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n  this file except in compliance with the License. You may obtain a copy of the\r\n  License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n  KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n  WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n  MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n  See the Apache Version 2.0 License for specific language governing permissions\r\n  and limitations under the License.\r\n  ***************************************************************************** */\r\n  /* global Reflect, Promise */\r\n\r\n  var extendStatics = function(d, b) {\r\n      extendStatics = Object.setPrototypeOf ||\r\n          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n          function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n      return extendStatics(d, b);\r\n  };\r\n\r\n  function __extends(d, b) {\r\n      extendStatics(d, b);\r\n      function __() { this.constructor = d; }\r\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n  }\r\n\r\n  var __assign = function() {\r\n      __assign = Object.assign || function __assign(t) {\r\n          for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n              s = arguments[i];\r\n              for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n          }\r\n          return t;\r\n      };\r\n      return __assign.apply(this, arguments);\r\n  };\n\n  /* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n  * Apache-2.0 */\n  /**\n   * Checks parameters to see if we should use FormData to send the request\n   * @param params The object whose keys will be encoded.\n   * @return A boolean indicating if FormData will be required.\n   */\n  function requiresFormData(params) {\n      return Object.keys(params).some(function (key) {\n          var value = params[key];\n          if (!value) {\n              return false;\n          }\n          var type = value.constructor.name;\n          switch (type) {\n              case \"Array\":\n                  return false;\n              case \"Object\":\n                  return false;\n              case \"Date\":\n                  return false;\n              case \"Function\":\n                  return false;\n              case \"Boolean\":\n                  return false;\n              case \"String\":\n                  return false;\n              case \"Number\":\n                  return false;\n              default:\n                  return true;\n          }\n      });\n  }\n  /**\n   * Converts parameters to the proper representation to send to the ArcGIS REST API.\n   * @param params The object whose keys will be encoded.\n   * @return A new object with properly encoded values.\n   */\n  function processParams(params) {\n      var newParams = {};\n      Object.keys(params).forEach(function (key) {\n          var param = params[key];\n          if (!param &&\n              param !== 0 &&\n              typeof param !== \"boolean\" &&\n              typeof param !== \"string\") {\n              return;\n          }\n          var type = param.constructor.name;\n          var value;\n          // properly encodes objects, arrays and dates for arcgis.com and other services.\n          // ported from https://github.com/Esri/esri-leaflet/blob/master/src/Request.js#L22-L30\n          // also see https://github.com/Esri/arcgis-rest-js/issues/18:\n          // null, undefined, function are excluded. If you want to send an empty key you need to send an empty string \"\".\n          switch (type) {\n              case \"Array\":\n                  // Based on the first element of the array, classify array as an array of objects to be stringified\n                  // or an array of non-objects to be comma-separated\n                  value =\n                      param[0] &&\n                          param[0].constructor &&\n                          param[0].constructor.name === \"Object\"\n                          ? JSON.stringify(param)\n                          : param.join(\",\");\n                  break;\n              case \"Object\":\n                  value = JSON.stringify(param);\n                  break;\n              case \"Date\":\n                  value = param.valueOf();\n                  break;\n              case \"Function\":\n                  value = null;\n                  break;\n              case \"Boolean\":\n                  value = param + \"\";\n                  break;\n              default:\n                  value = param;\n                  break;\n          }\n          if (value || value === 0 || typeof value === \"string\") {\n              newParams[key] = value;\n          }\n      });\n      return newParams;\n  }\n\n  /* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n   * Apache-2.0 */\n  function encodeParam(key, value) {\n      return encodeURIComponent(key) + \"=\" + encodeURIComponent(value);\n  }\n  /**\n   * Encodes the passed object as a query string.\n   *\n   * @param params An object to be encoded.\n   * @returns An encoded query string.\n   */\n  function encodeQueryString(params) {\n      var newParams = processParams(params);\n      return Object.keys(newParams)\n          .map(function (key) {\n          return encodeParam(key, newParams[key]);\n      })\n          .join(\"&\");\n  }\n\n  /* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n   * Apache-2.0 */\n  /**\n   * Encodes parameters in a [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) object in browsers or in a [FormData](https://github.com/form-data/form-data) in Node.js\n   *\n   * @param params An object to be encoded.\n   * @returns The complete [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) object.\n   */\n  function encodeFormData(params) {\n      var useFormData = requiresFormData(params);\n      var newParams = processParams(params);\n      if (useFormData) {\n          var formData_1 = new FormData();\n          Object.keys(newParams).forEach(function (key) {\n              if (typeof Blob !== \"undefined\" && newParams[key] instanceof Blob) {\n                  /* To name the Blob:\n                   1. look to an alternate request parameter called 'fileName'\n                   2. see if 'name' has been tacked onto the Blob manually\n                   3. if all else fails, use the request parameter\n                  */\n                  var filename = newParams[\"fileName\"] || newParams[key].name || key;\n                  formData_1.append(key, newParams[key], filename);\n              }\n              else {\n                  formData_1.append(key, newParams[key]);\n              }\n          });\n          return formData_1;\n      }\n      else {\n          return encodeQueryString(params);\n      }\n  }\n\n  /* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n   * Apache-2.0 */\n  // TypeScript 2.1 no longer allows you to extend built in types. See https://github.com/Microsoft/TypeScript/issues/12790#issuecomment-265981442\n  // and https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n  //\n  // This code is from MDN https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types.\n  var ArcGISRequestError = /** @class */ (function () {\n      /**\n       * Create a new `ArcGISRequestError`  object.\n       *\n       * @param message - The error message from the API\n       * @param code - The error code from the API\n       * @param response - The original response from the API that caused the error\n       * @param url - The original url of the request\n       * @param options - The original options and parameters of the request\n       */\n      function ArcGISRequestError(message, code, response, url, options) {\n          message = message || \"UNKNOWN_ERROR\";\n          code = code || \"UNKNOWN_ERROR_CODE\";\n          this.name = \"ArcGISRequestError\";\n          this.message =\n              code === \"UNKNOWN_ERROR_CODE\" ? message : code + \": \" + message;\n          this.originalMessage = message;\n          this.code = code;\n          this.response = response;\n          this.url = url;\n          this.options = options;\n      }\n      return ArcGISRequestError;\n  }());\n  ArcGISRequestError.prototype = Object.create(Error.prototype);\n  ArcGISRequestError.prototype.constructor = ArcGISRequestError;\n\n  /* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n   * Apache-2.0 */\n  var NODEJS_DEFAULT_REFERER_HEADER = \"@esri/arcgis-rest-js\";\n  /**\n   * ```js\n   * import { request } from '@esri/arcgis-rest-request';\n   * //\n   * request('https://www.arcgis.com/sharing/rest')\n   *   .then(response) // response.currentVersion === 5.2\n   * //\n   * request('https://www.arcgis.com/sharing/rest', {\n   *   httpMethod: \"GET\"\n   * })\n   * //\n   * request('https://www.arcgis.com/sharing/rest/search', {\n   *   params: { q: 'parks' }\n   * })\n   *   .then(response) // response.total => 78379\n   * ```\n   * Generic method for making HTTP requests to ArcGIS REST API endpoints.\n   *\n   * @param url - The URL of the ArcGIS REST API endpoint.\n   * @param requestOptions - Options for the request, including parameters relevant to the endpoint.\n   * @returns A Promise that will resolve with the data from the response.\n   */\n  function request(url, requestOptions) {\n      if (requestOptions === void 0) { requestOptions = { params: { f: \"json\" } }; }\n      var options = __assign({ httpMethod: \"POST\" }, requestOptions);\n      var missingGlobals = [];\n      var recommendedPackages = [];\n      // don't check for a global fetch if a custom implementation was passed through\n      if (!options.fetch && typeof fetch !== \"undefined\") {\n          options.fetch = fetch.bind(Function(\"return this\")());\n      }\n      else {\n          missingGlobals.push(\"`fetch`\");\n          recommendedPackages.push(\"`isomorphic-fetch`\");\n      }\n      if (typeof Promise === \"undefined\") {\n          missingGlobals.push(\"`Promise`\");\n          recommendedPackages.push(\"`es6-promise`\");\n      }\n      if (typeof FormData === \"undefined\") {\n          missingGlobals.push(\"`FormData`\");\n          recommendedPackages.push(\"`isomorphic-form-data`\");\n      }\n      if (!options.fetch ||\n          typeof Promise === \"undefined\" ||\n          typeof FormData === \"undefined\") {\n          throw new Error(\"`arcgis-rest-request` requires global variables for `fetch`, `Promise` and `FormData` to be present in the global scope. You are missing \" + missingGlobals.join(\", \") + \". We recommend installing the \" + recommendedPackages.join(\", \") + \" modules at the root of your application to add these to the global scope. See https://bit.ly/2KNwWaJ for more info.\");\n      }\n      var httpMethod = options.httpMethod, authentication = options.authentication;\n      var params = __assign({ f: \"json\" }, requestOptions.params);\n      var fetchOptions = {\n          method: httpMethod,\n          // ensures behavior mimics XMLHttpRequest. needed to support sending IWA cookies\n          credentials: \"same-origin\"\n      };\n      return (authentication\n          ? authentication.getToken(url, {\n              fetch: options.fetch\n          })\n          : Promise.resolve(\"\"))\n          .then(function (token) {\n          if (token.length) {\n              params.token = token;\n          }\n          if (fetchOptions.method === \"GET\") {\n              // encode the parameters into the query string\n              var queryParams = encodeQueryString(params);\n              // dont append a '?' unless parameters are actually present\n              var urlWithQueryString = queryParams === \"\" ? url : url + \"?\" + encodeQueryString(params);\n              if (options.maxUrlLength &&\n                  urlWithQueryString.length > options.maxUrlLength) {\n                  // the consumer specified a maximum length for URLs\n                  // and this would exceed it, so use post instead\n                  fetchOptions.method = \"POST\";\n              }\n              else {\n                  // just use GET\n                  url = urlWithQueryString;\n              }\n          }\n          if (fetchOptions.method === \"POST\") {\n              fetchOptions.body = encodeFormData(params);\n          }\n          // Mixin headers from request options\n          fetchOptions.headers = __assign({}, requestOptions.headers);\n          /* istanbul ignore next - karma reports coverage on browser tests only */\n          if (typeof window === \"undefined\" && !fetchOptions.headers.referer) {\n              fetchOptions.headers.referer = NODEJS_DEFAULT_REFERER_HEADER;\n          }\n          /* istanbul ignore else blob responses are difficult to make cross platform we will just have to trust the isomorphic fetch will do its job */\n          if (!requiresFormData(params)) {\n              fetchOptions.headers[\"Content-Type\"] =\n                  \"application/x-www-form-urlencoded\";\n          }\n          return options.fetch(url, fetchOptions);\n      })\n          .then(function (response) {\n          if (!response.ok) {\n              // server responded w/ an actual error (404, 500, etc)\n              var status_1 = response.status, statusText = response.statusText;\n              throw new ArcGISRequestError(statusText, \"HTTP \" + status_1, response, url, options);\n          }\n          switch (params.f) {\n              case \"json\":\n                  return response.json();\n              case \"geojson\":\n                  return response.json();\n              case \"html\":\n                  return response.text();\n              case \"text\":\n                  return response.text();\n              /* istanbul ignore next blob responses are difficult to make cross platform we will just have to trust that isomorphic fetch will do its job */\n              default:\n                  return response.blob();\n          }\n      })\n          .then(function (data) {\n          if (params.f === \"json\" || params.f === \"geojson\") {\n              return checkForErrors(data, url, params, options);\n          }\n          else {\n              return data;\n          }\n      });\n  }\n  var ArcGISAuthError = /** @class */ (function (_super) {\n      __extends(ArcGISAuthError, _super);\n      /**\n       * Create a new `ArcGISAuthError`  object.\n       *\n       * @param message - The error message from the API\n       * @param code - The error code from the API\n       * @param response - The original response from the API that caused the error\n       * @param url - The original url of the request\n       * @param options - The original options of the request\n       */\n      function ArcGISAuthError(message, code, response, url, options) {\n          if (message === void 0) { message = \"AUTHENTICATION_ERROR\"; }\n          if (code === void 0) { code = \"AUTHENTICATION_ERROR_CODE\"; }\n          var _this = _super.call(this, message, code, response, url, options) || this;\n          _this.name = \"ArcGISAuthError\";\n          _this.message =\n              code === \"AUTHENTICATION_ERROR_CODE\" ? message : code + \": \" + message;\n          return _this;\n      }\n      ArcGISAuthError.prototype.retry = function (getSession, retryLimit) {\n          var _this = this;\n          if (retryLimit === void 0) { retryLimit = 3; }\n          var tries = 0;\n          var retryRequest = function (resolve, reject) {\n              getSession(_this.url, _this.options)\n                  .then(function (session) {\n                  var newOptions = __assign({}, _this.options, { authentication: session });\n                  tries = tries + 1;\n                  return request(_this.url, newOptions);\n              })\n                  .then(function (response) {\n                  resolve(response);\n              })\n                  .catch(function (e) {\n                  if (e.name === \"ArcGISAuthError\" && tries < retryLimit) {\n                      retryRequest(resolve, reject);\n                  }\n                  else if (e.name === \"ArcGISAuthError\" && tries >= retryLimit) {\n                      reject(_this);\n                  }\n                  else {\n                      reject(e);\n                  }\n              });\n          };\n          return new Promise(function (resolve, reject) {\n              retryRequest(resolve, reject);\n          });\n      };\n      return ArcGISAuthError;\n  }(ArcGISRequestError));\n  /**\n   * Checks for errors in a JSON response from the ArcGIS REST API. If there are no errors, it will return the `data` passed in. If there is an error, it will throw an `ArcGISRequestError` or `ArcGISAuthError`.\n   *\n   * @param data The response JSON to check for errors.\n   * @param url The url of the original request\n   * @param params The parameters of the original request\n   * @param options The options of the original request\n   * @returns The data that was passed in the `data` parameter\n   */\n  function checkForErrors(response, url, params, options) {\n      // this is an error message from billing.arcgis.com backend\n      if (response.code >= 400) {\n          var message = response.message, code = response.code;\n          throw new ArcGISRequestError(message, code, response, url, options);\n      }\n      // error from ArcGIS Online or an ArcGIS Portal or server instance.\n      if (response.error) {\n          var _a = response.error, message = _a.message, code = _a.code, messageCode = _a.messageCode;\n          var errorCode = messageCode || code || \"UNKNOWN_ERROR_CODE\";\n          if (code === 498 || code === 499 || messageCode === \"GWM_0003\") {\n              throw new ArcGISAuthError(message, errorCode, response, url, options);\n          }\n          throw new ArcGISRequestError(message, errorCode, response, url, options);\n      }\n      // error from a status check\n      if (response.status === \"failed\" || response.status === \"failure\") {\n          var message = void 0;\n          var code = \"UNKNOWN_ERROR_CODE\";\n          try {\n              message = JSON.parse(response.statusMessage).message;\n              code = JSON.parse(response.statusMessage).code;\n          }\n          catch (e) {\n              message = response.statusMessage || response.message;\n          }\n          throw new ArcGISRequestError(message, code, response, url, options);\n      }\n      return response;\n  }\n\n  /* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n   * Apache-2.0 */\n\n  /* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n   * Apache-2.0 */\n  /**\n   * Enum describing the different errors that might be thrown by a request.\n   *\n   * ```ts\n   * import { request, ErrorTypes } from '@esri/arcgis-rest-request';\n   *\n   * request(\"...\").catch((e) => {\n   *   switch(e.name) {\n   *     case ErrorType.ArcGISRequestError:\n   *     // handle a general error from the API\n   *     break;\n   *\n   *     case ErrorType.ArcGISAuthError:\n   *     // handle an authentication error\n   *     break;\n   *\n   *     default:\n   *     // handle some other error (usually a network error)\n   *   }\n   * });\n   * ```\n   */\n  var ErrorTypes;\n  (function (ErrorTypes) {\n      ErrorTypes[\"ArcGISRequestError\"] = \"ArcGISRequestError\";\n      ErrorTypes[\"ArcGISAuthError\"] = \"ArcGISAuthError\";\n  })(ErrorTypes || (ErrorTypes = {}));\n\n  /* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n   * Apache-2.0 */\n  /**\n   * Helper method to ensure that user supplied urls don't include whitespace or a trailing slash.\n   */\n  function cleanUrl(url) {\n      // trim leading and trailing spaces, but not spaces inside the url\n      url = url.trim();\n      // remove the trailing slash to the url if one was included\n      if (url[url.length - 1] === \"/\") {\n          url = url.slice(0, -1);\n      }\n      return url;\n  }\n\n  /**\n   * Helper that returns the appropriate portal url for a given request. `requestOptions.portal` is given\n   * precedence over `authentication.portal`. If neither are present, `www.arcgis.com/sharing/rest` is returned.\n   *\n   * @param requestOptions - Request options that may have authentication manager\n   * @returns Portal url to be used in API requests\n   */\n  function getPortalUrl(requestOptions) {\n      if (requestOptions === void 0) { requestOptions = {}; }\n      // use portal in options if specified\n      if (requestOptions.portal) {\n          return cleanUrl(requestOptions.portal);\n      }\n      // if auth was passed, use that portal\n      if (requestOptions.authentication) {\n          // the portal url is already scrubbed in the auth package\n          return requestOptions.authentication.portal;\n      }\n      // default to arcgis.com\n      return \"https://www.arcgis.com/sharing/rest\";\n  }\n\n  /* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n   * Apache-2.0 */\n\n  /* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n   * Apache-2.0 */\n\n  /* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n   * Apache-2.0 */\n\n  /* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n   * Apache-2.0 */\n  /**\n   * Serialize an item into a json format accepted by the Portal API\n   * for create and update operations\n   *\n   * @param item Item to be serialized\n   * @returns a formatted json object to be sent to Portal\n   */\n  function serializeItem(item) {\n      // create a clone so we're not messing with the original\n      var clone = JSON.parse(JSON.stringify(item));\n      // join keywords and tags...\n      var _a = item.typeKeywords, typeKeywords = _a === void 0 ? [] : _a, _b = item.tags, tags = _b === void 0 ? [] : _b;\n      clone.typeKeywords = typeKeywords.join(\", \");\n      clone.tags = tags.join(\", \");\n      // convert .data to .text\n      if (clone.data) {\n          clone.text = JSON.stringify(clone.data);\n          delete clone.data;\n      }\n      // Convert properties to a string\n      if (clone.properties) {\n          clone.properties = JSON.stringify(clone.properties);\n      }\n      return clone;\n  }\n  /**\n   * requestOptions.owner is given priority, requestOptions.item.owner will be checked next. If neither are present, authentication.username will be assumed.\n   */\n  function determineOwner(requestOptions) {\n      if (requestOptions.owner) {\n          return requestOptions.owner;\n      }\n      if (requestOptions.item && requestOptions.item.owner) {\n          return requestOptions.item.owner;\n      }\n      else {\n          return requestOptions.authentication.username;\n      }\n  }\n\n  /* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n   * Apache-2.0 */\n\n  /* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n   * Apache-2.0 */\n  /**\n   * ```js\n   * import { createFolder } from '@esri/arcgis-rest-items';\n   * //\n   * createFolder({\n   *   title: 'Map Collection',\n   *   authentication: userSession\n   * })\n   *   .then(response)\n   * ```\n   * Create a folder. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/create-folder.htm) for more information.\n   *\n   * @param requestOptions - Options for the request\n   * @returns A Promise that resolves with folder details once the folder has been created\n   */\n  function createFolder(requestOptions) {\n      var owner = determineOwner(requestOptions);\n      var baseUrl = getPortalUrl(requestOptions) + \"/content/users/\" + owner;\n      var url = baseUrl + \"/createFolder\";\n      requestOptions.params = __assign({ title: requestOptions.title }, requestOptions.params);\n      return request(url, requestOptions);\n  }\n  /**\n   * ```js\n   * import { createItemInFolder } from '@esri/arcgis-rest-items';\n   * //\n   * createItem({\n   *   item: {\n   *     title: \"The Amazing Voyage\",\n   *     type: \"Web Map\",\n   *     data: {}\n   *   },\n   *   folder: 'underwater',\n   *   authentication\n   * })\n   * ```\n   * Create an item in a folder. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/add-item.htm) for more information.\n   *\n   * @param requestOptions = Options for the request\n   */\n  function createItemInFolder(requestOptions) {\n      var owner = determineOwner(requestOptions);\n      var baseUrl = getPortalUrl(requestOptions) + \"/content/users/\" + owner;\n      var url = baseUrl + \"/addItem\";\n      if (requestOptions.folder) {\n          url = baseUrl + \"/\" + requestOptions.folder + \"/addItem\";\n      }\n      // serialize the item into something Portal will accept\n      requestOptions.params = __assign({}, requestOptions.params, serializeItem(requestOptions.item));\n      return request(url, requestOptions);\n  }\n\n  /* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n   * Apache-2.0 */\n  /**\n   * Get an item by id. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/item.htm) for more information.\n   *\n   * @param id - Item Id\n   * @param requestOptions - Options for the request\n   * @returns A Promise that will resolve with the data from the response.\n   */\n  function getItem(id, requestOptions) {\n      var url = getPortalUrl(requestOptions) + \"/content/items/\" + id;\n      // default to a GET request\n      var options = __assign({ httpMethod: \"GET\" }, requestOptions);\n      return request(url, options);\n  }\n  /**\n   * Get the /data for an item. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/item-data.htm) for more information.\n   * @param id - Item Id\n   * @param requestOptions - Options for the request\n   * @returns A Promise that will resolve with the json data for the item.\n   */\n  function getItemData(id, requestOptions) {\n      var url = getPortalUrl(requestOptions) + \"/content/items/\" + id + \"/data\";\n      // default to a GET request\n      var options = __assign({ httpMethod: \"GET\", params: {} }, requestOptions);\n      if (options.file) {\n          options.params.f = null;\n      }\n      return request(url, options);\n  }\n  /**\n   * Get the resources associated with an item\n   *\n   * @param requestOptions - Options for the request\n   * @returns A Promise to get some item resources.\n   */\n  function getItemResources(requestOptions) {\n      var url = getPortalUrl(requestOptions) + \"/content/items/\" + requestOptions.id + \"/resources\";\n      // mix in user supplied params\n      requestOptions.params = __assign({}, requestOptions.params, { num: 1000 });\n      // at v2, the argument signature of this method should match getItemData() and getItemGroups() if requests can be made anonymously\n      return request(url, requestOptions);\n  }\n\n  /* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n   * Apache-2.0 */\n\n  /* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n   * Apache-2.0 */\n\n  /* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n   * Apache-2.0 */\n\n  /* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n   * Apache-2.0 */\n  /**\n   * ```js\n   * import { updateItem } from '@esri/arcgis-rest-items';\n   * //\n   * updateItem({\n   *   item: {\n   *     id: \"3ef\",\n   *     description: \"A three hour tour\"\n   *   },\n   *   authentication\n   * })\n   *   .then(response)\n   * ```\n   * Update an Item. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/update-item.htm) for more information.\n   *\n   * @param item - The item to update.\n   * @param requestOptions - Options for the request.\n   * @returns A Promise that updates an item.\n   */\n  function updateItem(requestOptions) {\n      var owner = determineOwner(requestOptions);\n      var url = getPortalUrl(requestOptions) + \"/content/users/\" + owner + \"/items/\" + requestOptions.item.id + \"/update\";\n      // serialize the item into something Portal will accept\n      requestOptions.params = __assign({}, requestOptions.params, serializeItem(requestOptions.item));\n      return request(url, requestOptions);\n  }\n  /**\n   * ```js\n   * import { moveItem } from '@esri/arcgis-rest-items';\n   * //\n   * moveItem({\n   *   itemId: \"3ef\",\n   *   folderId: \"7c5\",\n   *   authentication: userSession\n   * })\n   * ```\n   * Move an item to a folder. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/move-item.htm) for more information.\n   *\n   * @param requestOptions - Options for the request\n   * @returns A Promise that resolves with owner and folder details once the move has been completed\n   */\n  function moveItem(requestOptions) {\n      var owner = determineOwner(requestOptions);\n      var url = getPortalUrl(requestOptions) + \"/content/users/\" + owner + \"/items/\" + requestOptions.itemId + \"/move\";\n      var folderId = requestOptions.folderId;\n      if (!folderId) {\n          folderId = \"/\";\n      }\n      requestOptions.params = __assign({ folder: folderId }, requestOptions.params);\n      return request(url, requestOptions);\n  }\n\n  /* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n   * Apache-2.0 */\n\n  /* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n   * Apache-2.0 */\n  /**\n   * Serialize a group into a json format accepted by the Portal API\n   * for create and update operations\n   *\n   * @param group IGroup to be serialized\n   * @returns a formatted JSON object to be sent to Portal\n   * @private\n   */\n  function serializeGroup(group) {\n      // create a clone so we're not messing with the original\n      var clone = JSON.parse(JSON.stringify(group));\n      // join and tags...\n      var _a = group.tags, tags = _a === void 0 ? [] : _a;\n      clone.tags = tags.join(\", \");\n      return clone;\n  }\n\n  /* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n   * Apache-2.0 */\n  /**\n   * ```js\n   * import { createGroup } from \"@esri/arcgis-rest-groups\";\n   * //\n   * createGroup({\n   *   group: {\n   *     title: \"No Homers\",\n   *     access: \"public\"\n   *   },\n   *   authentication\n   * })\n   *   .then(response)\n   * ```\n   * Create a new Group. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/create-group.htm) for more information.\n   *\n   * Note: The group name must be unique within the user's organization.\n   * @param requestOptions  - Options for the request, including a group object\n   * @returns A Promise that will resolve with the success/failure status of the request\n   */\n  function createGroup(requestOptions) {\n      var url = getPortalUrl(requestOptions) + \"/community/createGroup\";\n      var options = __assign({}, requestOptions);\n      // serialize the group into something Portal will accept\n      options.params = serializeGroup(requestOptions.group);\n      return request(url, options);\n  }\n\n  /* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n   * Apache-2.0 */\n  /**\n   * ```js\n   * import { getGroup } from \"@esri/arcgis-rest-groups\";\n   * //\n   * getGroup(\"fxb988\") // id\n   *   .then(response)\n   * ```\n   * Fetch a group using its id. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/group.htm) for more information.\n   *\n   * @param id - Group Id\n   * @param requestOptions  - Options for the request\n   * @returns  A Promise that will resolve with the data from the response.\n   */\n  function getGroup(id, requestOptions) {\n      var url = getPortalUrl(requestOptions) + \"/community/groups/\" + id;\n      // default to a GET request\n      var options = __assign({ httpMethod: \"GET\" }, requestOptions);\n      return request(url, options);\n  }\n  /**\n   * Returns the content of a Group. Since the group may contain 1000s of items\n   * the requestParams allow for paging.\n   * @param id - Group Id\n   * @param requestOptions  - Options for the request, including paging parameters.\n   * @returns  A Promise that will resolve with the content of the group.\n   */\n  function getGroupContent(id, requestOptions) {\n      var url = getPortalUrl(requestOptions) + \"/content/groups/\" + id;\n      // default to a GET request\n      var options = __assign({ httpMethod: \"GET\" }, { params: { start: 1, num: 100 } }, requestOptions);\n      // is this the most concise way to mixin with the defaults above?\n      if (requestOptions && requestOptions.paging) {\n          options.params = __assign({}, requestOptions.paging);\n      }\n      return request(url, options);\n  }\n\n  /* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n   * Apache-2.0 */\n\n  /* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n   * Apache-2.0 */\n\n  /* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n   * Apache-2.0 */\n\n  /* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n   * Apache-2.0 */\n\n  /* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n   * Apache-2.0 */\n\n  /* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n   * Apache-2.0 */\n\n  /* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n   * Apache-2.0 */\n  function getSharingUrl(requestOptions) {\n      var username = requestOptions.authentication.username;\n      var owner = requestOptions.owner || username;\n      return getPortalUrl(requestOptions) + \"/content/users/\" + encodeURIComponent(owner) + \"/items/\" + requestOptions.id + \"/share\";\n  }\n  function isItemOwner(requestOptions) {\n      var username = requestOptions.authentication.username;\n      var owner = requestOptions.owner || username;\n      return owner === username;\n  }\n  /**\n   * Check it the user is a full org_admin\n   * @param requestOptions\n   * @returns Promise resolving in a boolean indicating if the user is an ArcGIS Organization administrator\n   */\n  function isOrgAdmin(requestOptions) {\n      var session = requestOptions.authentication;\n      return session.getUser(requestOptions).then(function (user) {\n          if (!user || user.role !== \"org_admin\") {\n              return false;\n          }\n          else {\n              return true;\n          }\n      });\n  }\n  /**\n   * Get the User Membership for a particular group. Use this if all you have is the groupId.\n   * If you have the group object, check the `userMembership.memberType` property instead of calling this method.\n   *\n   * @param IGroupIdRequestOptions options to pass through in the request\n   * @returns A Promise that resolves with \"owner\" | \"admin\" | \"member\" | \"nonmember\"\n   */\n  function getUserMembership(requestOptions) {\n      // fetch the group...\n      return getGroup(requestOptions.groupId, requestOptions)\n          .then(function (group) {\n          return group.userMembership.memberType;\n      })\n          .catch(function () {\n          return \"nonmember\";\n      });\n  }\n\n  /* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n   * Apache-2.0 */\n  /**\n   * ```js\n   * import { setItemAccess } from '@esri/arcgis-rest-sharing';\n   * //\n   * setItemAccess({\n   *   id: \"abc123\",\n   *   access: \"public\", // 'org' || 'private'\n   *   authentication: session\n   * })\n   * ```\n   * Change who is able to access an item.\n   *\n   * @param requestOptions - Options for the request.\n   * @returns A Promise that will resolve with the data from the response.\n   */\n  function setItemAccess(requestOptions) {\n      var url = getSharingUrl(requestOptions);\n      if (isItemOwner(requestOptions)) {\n          // if the user owns the item, proceed\n          return updateItemAccess(url, requestOptions);\n      }\n      else {\n          // otherwise we need to check to see if they are an organization admin\n          return isOrgAdmin(requestOptions).then(function (admin) {\n              if (admin) {\n                  return updateItemAccess(url, requestOptions);\n              }\n              else {\n                  // if neither, updating the sharing isnt possible\n                  throw Error(\"This item can not be shared by \" + requestOptions.authentication.username + \". They are neither the item owner nor an organization admin.\");\n              }\n          });\n      }\n  }\n  function updateItemAccess(url, requestOptions) {\n      requestOptions.params = __assign({ org: false, everyone: false }, requestOptions.params);\n      // if the user wants to make the item private, it needs to be unshared from any/all groups as well\n      if (requestOptions.access === \"private\") {\n          requestOptions.params.groups = \" \";\n      }\n      if (requestOptions.access === \"org\") {\n          requestOptions.params.org = true;\n      }\n      // if sharing with everyone, share with the entire organization as well.\n      if (requestOptions.access === \"public\") {\n          requestOptions.params.org = true;\n          requestOptions.params.everyone = true;\n      }\n      return request(url, requestOptions);\n  }\n\n  /* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n   * Apache-2.0 */\n  /**\n   * ```js\n   * import { shareItemWithGroup } from '@esri/arcgis-rest-sharing';\n   * //\n   * shareItemWithGroup({\n   *   id: \"abc123\",\n   *   groupId: \"xyz987\",\n   *   authentication\n   * })\n   * ```\n   * Share an item with a group, either as an [item owner](https://developers.arcgis.com/rest/users-groups-and-items/share-item-as-item-owner-.htm), [group admin]((https://developers.arcgis.com/rest/users-groups-and-items/share-item-as-group-admin-.htm)) or organization admin.\n   *\n   * @param requestOptions - Options for the request.\n   * @returns A Promise that will resolve with the data from the response.\n   */\n  function shareItemWithGroup(requestOptions) {\n      return changeGroupSharing(__assign({ action: \"share\" }, requestOptions));\n  }\n  /**\n   * @param requestOptions - Options for the request.\n   * @returns A Promise that will resolve with the data from the response.\n   */\n  function changeGroupSharing(requestOptions) {\n      var username = requestOptions.authentication.username;\n      var owner = requestOptions.owner || username;\n      return isOrgAdmin(requestOptions).then(function (admin) {\n          var resultProp = requestOptions.action === \"share\" ? \"notSharedWith\" : \"notUnsharedFrom\";\n          // check if the item has already been shared with the group...\n          return isItemSharedWithGroup(requestOptions).then(function (result) {\n              // console.log(admin);\n              // if we are sharing and result is true OR we are unsharing and result is false... short circuit\n              if ((requestOptions.action === \"share\" && result === true) ||\n                  (requestOptions.action === \"unshare\" && result === false)) {\n                  // and send back the same response structure ArcGIS Online would\n                  var response = { itemId: requestOptions.id, shortcut: true };\n                  response[resultProp] = [];\n                  return response;\n              }\n              else {\n                  // next check to ensure the user is a member of the group\n                  return getUserMembership(requestOptions)\n                      .then(function (membership) {\n                      if (membership === \"nonmember\") {\n                          // abort and reject promise\n                          throw Error(\"This item can not be \" + requestOptions.action + \"d by \" + username + \" as they are not a member of the specified group \" + requestOptions.groupId + \".\");\n                      }\n                      else {\n                          // if orgAdmin or owner (and member of group) share using the owner url\n                          if (owner === username || admin) {\n                              return getPortalUrl(requestOptions) + \"/content/users/\" + owner + \"/items/\" + requestOptions.id + \"/\" + requestOptions.action;\n                          }\n                          else {\n                              // if they are a group admin/owner, use the bare item url\n                              if (membership === \"admin\" || membership === \"owner\") {\n                                  return getPortalUrl(requestOptions) + \"/content/items/\" + requestOptions.id + \"/\" + requestOptions.action;\n                              }\n                              else {\n                                  // otherwise abort\n                                  throw Error(\"This item can not be \" + requestOptions.action + \"d by \" + username + \" as they are neither the owner, a groupAdmin of \" + requestOptions.groupId + \", nor an org_admin.\");\n                              }\n                          }\n                      }\n                  })\n                      .then(function (url) {\n                      // now its finally time to do the sharing\n                      requestOptions.params = {\n                          groups: requestOptions.groupId,\n                          confirmItemControl: requestOptions.confirmItemControl\n                      };\n                      // dont mixin to ensure that old query parameters from the search request arent included\n                      return request(url, requestOptions);\n                  })\n                      .then(function (sharingResponse) {\n                      if (sharingResponse[resultProp].length) {\n                          throw Error(\"Item \" + requestOptions.id + \" could not be \" + requestOptions.action + \"d to group \" + requestOptions.groupId + \".\");\n                      }\n                      else {\n                          // all is well\n                          return sharingResponse;\n                      }\n                  });\n              } // else\n          }); // then\n      });\n  }\n  /**\n   * Find out whether or not an item is already shared with a group.\n   *\n   * @param requestOptions - Options for the request.\n   * @returns A Promise that will resolve with the data from the response.\n   */\n  function isItemSharedWithGroup(requestOptions) {\n      var query = {\n          q: \"id: \" + requestOptions.id + \" AND group: \" + requestOptions.groupId,\n          start: 1,\n          num: 10,\n          sortField: \"title\"\n      };\n      // we need to append some params into requestOptions, so make a clone\n      // instead of mutating the params on the inbound requestOptions object\n      var options = __assign({}, requestOptions);\n      // instead of calling out to \"@esri/arcgis-rest-items, make the request manually to forgoe another dependency\n      options.params = __assign({}, query, requestOptions.params);\n      var url = getPortalUrl(options) + \"/search\";\n      return request(url, options).then(function (searchResponse) {\n          // if there are no search results at all, we know the item hasnt already been shared with the group\n          if (searchResponse.total === 0) {\n              return false;\n          }\n          else {\n              var sharedItem_1;\n              // otherwise loop through and search for the id\n              searchResponse.results.some(function (item) {\n                  var matchedItem = item.id === requestOptions.id;\n                  if (matchedItem) {\n                      sharedItem_1 = item;\n                  }\n                  return matchedItem;\n              });\n              if (sharedItem_1) {\n                  return true;\n              }\n              else {\n                  return false;\n              }\n          }\n      });\n  }\n\n  /* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n   * Apache-2.0 */\n\n  /*\r\n   | Copyright 2018 Esri\r\n   |\r\n   | Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   | you may not use this file except in compliance with the License.\r\n   | You may obtain a copy of the License at\r\n   |\r\n   |    http://www.apache.org/licenses/LICENSE-2.0\r\n   |\r\n   | Unless required by applicable law or agreed to in writing, software\r\n   | distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   | See the License for the specific language governing permissions and\r\n   | limitations under the License.\r\n   */\r\n  // -------------------------------------------------------------------------------------------------------------------//\r\n  /**\r\n   * A parameterized server name to replace the organization URL in a Web Mapping Application's URL to\r\n   * itself; name has to be acceptable to AGOL, otherwise it discards the URL, so substitution must be\r\n   * made before attempting to create the item.\r\n   * @protected\r\n   */\r\n  var PLACEHOLDER_SERVER_NAME = \"{{organization.portalBaseUrl}}\";\r\n  function doCommonTemplatizations(itemTemplate) {\r\n      // Use the initiative's extent\r\n      if (itemTemplate.item.extent) {\r\n          itemTemplate.item.extent = \"{{initiative.extent:optional}}\";\r\n      }\r\n      // Templatize the item's id\r\n      itemTemplate.item.id = templatize(itemTemplate.item.id);\r\n  }\r\n  /**\r\n   * Publishes an item and its data as an AGOL item.\r\n   *\r\n   * @param item Item's `item` section\r\n   * @param data Item's `data` section\r\n   * @param requestOptions Options for the request\r\n   * @param folderId Id of folder to receive item; null indicates that the item goes into the root\r\n   *                 folder; ignored for Group item type\r\n   * @param access Access to set for item: 'public', 'org', 'private'\r\n   * @return A promise that will resolve with an object reporting success and the Solution id\r\n   */\r\n  function createItemWithData(item, data, requestOptions, folderId, access) {\r\n      if (folderId === void 0) { folderId = null; }\r\n      if (access === void 0) { access = \"private\"; }\r\n      return new Promise(function (resolve, reject) {\r\n          var options = __assign({ item: item, folder: folderId }, requestOptions);\r\n          if (data) {\r\n              options.item.text = data;\r\n          }\r\n          // Create item and add its optional data section\r\n          createItemInFolder(options)\r\n              .then(function (results) {\r\n              if (access !== \"private\") { // set access if it is not AGOL default\r\n                  // Set the access manually since the access value in createItem appears to be ignored\r\n                  var options1 = __assign({ id: results.id, access: access }, requestOptions);\r\n                  setItemAccess(options1)\r\n                      .then(function (results2) {\r\n                      resolve({\r\n                          success: true,\r\n                          id: results2.itemId\r\n                      });\r\n                  }, function () { return reject({ success: false }); });\r\n              }\r\n              else {\r\n                  resolve({\r\n                      success: true,\r\n                      id: results.id\r\n                  });\r\n              }\r\n          }, function () { return reject({ success: false }); });\r\n      });\r\n  }\r\n  function deTemplatize(id) {\r\n      if (id.startsWith(\"{{\")) {\r\n          return id.substring(2, id.indexOf(\".\"));\r\n      }\r\n      else {\r\n          return id;\r\n      }\r\n  }\r\n  function deTemplatizeList(ids) {\r\n      return ids.map(function (id) {\r\n          return deTemplatize(id);\r\n      });\r\n  }\r\n  function finalCallback(key, successful, progressCallback) {\r\n      progressCallback({\r\n          processId: key,\r\n          status: successful ? \"done\" : \"failed\"\r\n      });\r\n  }\r\n  /**\r\n   * Creates a timestamp string using the current date and time.\r\n   *\r\n   * @return Timestamp\r\n   * @protected\r\n   */\r\n  function getTimestamp() {\r\n      return (new Date()).getTime().toString();\r\n  }\r\n  function templatize(id, param) {\r\n      if (param === void 0) { param = \"id\"; }\r\n      if (id.startsWith(\"{{\")) {\r\n          return id;\r\n      }\r\n      else {\r\n          return \"{{\" + id + \".\" + param + \"}}\";\r\n      }\r\n  }\r\n  function templatizeList(ids, param) {\r\n      if (param === void 0) { param = \"id\"; }\r\n      return ids.map(function (id) {\r\n          return templatize(id, param);\r\n      });\r\n  }\r\n  /**\r\n   * Updates the URL of an item.\r\n   *\r\n   * @param id AGOL id of item to update\r\n   * @param url URL to assign to item's base section\r\n   * @param requestOptions Options for the request\r\n   * @return A promise that will resolve when the item has been updated\r\n   */\r\n  function updateItemURL(id, url, requestOptions) {\r\n      return new Promise(function (resolve, reject) {\r\n          // Update its URL\r\n          var options = __assign({ item: {\r\n                  'id': id,\r\n                  'url': url\r\n              } }, requestOptions);\r\n          updateItem(options)\r\n              .then(function (updateResp) {\r\n              resolve(id);\r\n          }, function () { return reject(); });\r\n      });\r\n  }\n\n  /*\r\n   | Copyright 2018 Esri\r\n   |\r\n   | Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   | you may not use this file except in compliance with the License.\r\n   | You may obtain a copy of the License at\r\n   |\r\n   |    http://www.apache.org/licenses/LICENSE-2.0\r\n   |\r\n   | Unless required by applicable law or agreed to in writing, software\r\n   | distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   | See the License for the specific language governing permissions and\r\n   | limitations under the License.\r\n   */\r\n  /**\r\n   * Get a property out of a deeply nested object\r\n   * Does not handle anything but nested object graph\r\n   *\r\n   * @param obj Object to retrieve value from\r\n   * @param path Path into an object, e.g., \"data.values.webmap\", where \"data\" is a top-level property\r\n   *             in obj\r\n   * @return Value at end of path\r\n   */\r\n  function getProp(obj, path) {\r\n      return path.split(\".\").reduce(function (prev, curr) {\r\n          /* istanbul ignore next no need to test undefined scenario */\r\n          return prev ? prev[curr] : undefined;\r\n      }, obj);\r\n  }\r\n  /**\r\n   * Return an array of values from an object, based on an array of property paths\r\n   *\r\n   * @param obj object to retrive values from\r\n   * @param props Array of paths into the object e.g., \"data.values.webmap\", where \"data\" is a top-level property\r\n   *\r\n   * @return Array of the values plucked from the object\r\n   */\r\n  function getProps(obj, props) {\r\n      return props.reduce(function (a, p) {\r\n          var v = getProp(obj, p);\r\n          if (v) {\r\n              a.push(v);\r\n          }\r\n          return a;\r\n      }, []);\r\n  }\r\n  /**\r\n   * Look for a specific property name anywhere inside an object graph\r\n   * and return the value\r\n   */\r\n  function getDeepValues(obj, prop) {\r\n      var result = [];\r\n      if (!obj)\r\n          return result;\r\n      var p;\r\n      for (p in obj) {\r\n          if (obj.hasOwnProperty(p)) {\r\n              if (p === prop) {\r\n                  result.push(obj[p]);\r\n              }\r\n              else {\r\n                  if (Array.isArray(obj[p])) {\r\n                      obj[p].forEach(function (e) {\r\n                          result = result.concat(getDeepValues(e, prop));\r\n                      });\r\n                  }\r\n                  else if (typeof obj[p] === 'object') {\r\n                      result = result.concat(getDeepValues(obj[p], prop));\r\n                  }\r\n              }\r\n          }\r\n      }\r\n      return result;\r\n  }\n\n  /*\r\n   | Copyright 2018 Esri\r\n   |\r\n   | Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   | you may not use this file except in compliance with the License.\r\n   | You may obtain a copy of the License at\r\n   |\r\n   |    http://www.apache.org/licenses/LICENSE-2.0\r\n   |\r\n   | Unless required by applicable law or agreed to in writing, software\r\n   | distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   | See the License for the specific language governing permissions and\r\n   | limitations under the License.\r\n   */\r\n  /**\r\n   * Check if a given string is a GUID\r\n   * @param stringToTest string that may be a guid\r\n   *\r\n   * @returns boolean indicating if the string is a guid\r\n   */\r\n  function isGuid(stringToTest) {\r\n      if (typeof stringToTest !== 'string') {\r\n          return false;\r\n      }\r\n      if (stringToTest[0] === '{') {\r\n          stringToTest = stringToTest.substring(1, stringToTest.length - 1);\r\n      }\r\n      var regexGuid = /^(\\{){0,1}[0-9a-fA-F]{8}[-]?[0-9a-fA-F]{4}[-]?[0-9a-fA-F]{4}[-]?[0-9a-fA-F]{4}[-]?[0-9a-fA-F]{12}(\\}){0,1}$/gi;\r\n      return regexGuid.test(stringToTest);\r\n  }\n\n  /*\r\n   | Copyright 2018 Esri\r\n   |\r\n   | Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   | you may not use this file except in compliance with the License.\r\n   | You may obtain a copy of the License at\r\n   |\r\n   |    http://www.apache.org/licenses/LICENSE-2.0\r\n   |\r\n   | Unless required by applicable law or agreed to in writing, software\r\n   | distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   | See the License for the specific language governing permissions and\r\n   | limitations under the License.\r\n   */\r\n  /**\r\n   * Does the model have a specific typeKeyword?\r\n   */\r\n  function hasTypeKeyword(model, keyword) {\r\n      var typeKeywords = getProp(model, 'item.typeKeywords') || model.typeKeywords || [];\r\n      return typeKeywords.includes(keyword);\r\n  }\r\n  /**\r\n   * Does the model have any of a set of keywords\r\n   */\r\n  function hasAnyKeyword(model, keywords) {\r\n      var typeKeywords = getProp(model, 'item.typeKeywords') || model.typeKeywords || [];\r\n      return keywords.reduce(function (a, kw) {\r\n          if (!a) {\r\n              a = typeKeywords.includes(kw);\r\n          }\r\n          return a;\r\n      }, false);\r\n  }\r\n  /**\r\n   * Given the url of a webapp, parse our the id from the url\r\n   */\r\n  function parseIdFromUrl(url) {\r\n      var id = null;\r\n      if (!url) {\r\n          return id;\r\n      }\r\n      var qs = url.split('?')[1];\r\n      if (qs) {\r\n          id = qs.split('&').reduce(function (a, p) {\r\n              var part = p.split('=')[1];\r\n              if (part && isGuid(part)) {\r\n                  a = part;\r\n              }\r\n              return a;\r\n          }, null);\r\n      }\r\n      return id;\r\n  }\r\n  /**\r\n   * Return a random number, prefixed with a string. Used for unique identifiers that do not require\r\n   * the rigor of a full UUID - i.e. node id's, process ids etc.\r\n   * @param prefix String to prefix the random number with so the result is a valid javascript property\r\n   */\r\n  function createId(prefix) {\r\n      if (prefix === void 0) { prefix = \"i\"; }\r\n      // prepend some char so it's always a valid dotable property name\r\n      // get a random number, convert to base 36 representation, then grab chars 2-8\r\n      return \"\" + prefix + Math.random()\r\n          .toString(36)\r\n          .substr(2, 8);\r\n  }\n\n  /*\r\n   | Copyright 2018 Esri\r\n   |\r\n   | Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   | you may not use this file except in compliance with the License.\r\n   | You may obtain a copy of the License at\r\n   |\r\n   |    http://www.apache.org/licenses/LICENSE-2.0\r\n   |\r\n   | Unless required by applicable law or agreed to in writing, software\r\n   | distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   | See the License for the specific language governing permissions and\r\n   | limitations under the License.\r\n   */\r\n  /**\r\n   * The portion of a Dashboard app URL between the server and the app id.\r\n   * @protected\r\n   */\r\n  var OPS_DASHBOARD_APP_URL_PART = \"/apps/opsdashboard/index.html#/\";\r\n  // -- Externals ------------------------------------------------------------------------------------------------------//\r\n  // -- Create Bundle Process ------------------------------------------------------------------------------------------//\r\n  function completeItemTemplate(itemTemplate, requestOptions) {\r\n      return new Promise(function (resolve) {\r\n          // Update the estimated cost factor to deploy this item\r\n          itemTemplate.estimatedDeploymentCostFactor = 4;\r\n          // Common templatizations: extent, item id, item dependency ids\r\n          doCommonTemplatizations(itemTemplate);\r\n          // Templatize the app URL\r\n          itemTemplate.item.url = PLACEHOLDER_SERVER_NAME + OPS_DASHBOARD_APP_URL_PART;\r\n          resolve(itemTemplate);\r\n      });\r\n  }\r\n  /**\r\n   * Gets the ids of the dependencies of an AGOL dashboard item.\r\n   *\r\n   * @param fullItem A dashboard item whose dependencies are sought\r\n   * @param requestOptions Options for requesting information from AGOL\r\n   * @return A promise that will resolve with list of dependent ids\r\n   * @protected\r\n   */\r\n  function getDependencies(itemTemplate, requestOptions) {\r\n      return new Promise(function (resolve) {\r\n          var dependencies = [];\r\n          var widgets = getProp(itemTemplate, \"data.widgets\");\r\n          if (widgets) {\r\n              widgets.forEach(function (widget) {\r\n                  if (widget.type === \"mapWidget\") {\r\n                      dependencies.push(widget.itemId);\r\n                  }\r\n              });\r\n          }\r\n          resolve(dependencies);\r\n      });\r\n  }\r\n  // -- Deploy Bundle Process ------------------------------------------------------------------------------------------//\r\n  function deployItem(itemTemplate, settings, requestOptions, progressCallback) {\r\n      progressCallback({\r\n          processId: itemTemplate.key,\r\n          type: itemTemplate.type,\r\n          status: \"starting\",\r\n          estimatedCostFactor: itemTemplate.estimatedDeploymentCostFactor\r\n      });\r\n      return new Promise(function (resolve, reject) {\r\n          var options = __assign({ item: itemTemplate.item, folder: settings.folderId }, requestOptions);\r\n          if (itemTemplate.data) {\r\n              options.item.text = itemTemplate.data;\r\n          }\r\n          // Create the item\r\n          progressCallback({\r\n              processId: itemTemplate.key,\r\n              status: \"creating\",\r\n          });\r\n          createItemInFolder(options)\r\n              .then(function (createResponse) {\r\n              if (createResponse.success) {\r\n                  // Add the new item to the settings\r\n                  settings[deTemplatize(itemTemplate.itemId)] = {\r\n                      id: createResponse.id\r\n                  };\r\n                  itemTemplate.itemId = itemTemplate.item.id = createResponse.id;\r\n                  itemTemplate = adlib(itemTemplate, settings);\r\n                  // Update the app URL\r\n                  progressCallback({\r\n                      processId: itemTemplate.key,\r\n                      status: \"updating URL\"\r\n                  });\r\n                  updateItemURL(itemTemplate.itemId, itemTemplate.item.url, requestOptions)\r\n                      .then(function () {\r\n                      finalCallback(itemTemplate.key, true, progressCallback);\r\n                      resolve(itemTemplate);\r\n                  }, function () {\r\n                      finalCallback(itemTemplate.key, false, progressCallback);\r\n                      reject({ success: false });\r\n                  });\r\n              }\r\n              else {\r\n                  finalCallback(itemTemplate.key, false, progressCallback);\r\n                  reject({ success: false });\r\n              }\r\n          }, function () {\r\n              finalCallback(itemTemplate.key, false, progressCallback);\r\n              reject({ success: false });\r\n          });\r\n      });\r\n  }\n\n  var DashboardModule = /*#__PURE__*/Object.freeze({\n    OPS_DASHBOARD_APP_URL_PART: OPS_DASHBOARD_APP_URL_PART,\n    completeItemTemplate: completeItemTemplate,\n    getDependencies: getDependencies,\n    deployItem: deployItem\n  });\n\n  /*\r\n   | Copyright 2018 Esri\r\n   |\r\n   | Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   | you may not use this file except in compliance with the License.\r\n   | You may obtain a copy of the License at\r\n   |\r\n   |    http://www.apache.org/licenses/LICENSE-2.0\r\n   |\r\n   | Unless required by applicable law or agreed to in writing, software\r\n   | distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   | See the License for the specific language governing permissions and\r\n   | limitations under the License.\r\n   */\r\n  // -- Externals ------------------------------------------------------------------------------------------------------//\r\n  //\r\n  // -- Create Bundle Process ------------------------------------------------------------------------------------------//\r\n  function completeItemTemplate$1(itemTemplate, requestOptions) {\r\n      return new Promise(function (resolve) {\r\n          // Update the estimated cost factor to deploy this item\r\n          itemTemplate.estimatedDeploymentCostFactor = 3;\r\n          // Common templatizations: item id, item dependency ids\r\n          doCommonTemplatizations(itemTemplate);\r\n          resolve(itemTemplate);\r\n      });\r\n  }\r\n  /**\r\n   * Gets the ids of the dependencies (contents) of an AGOL group.\r\n   *\r\n   * @param fullItem A group whose contents are sought\r\n   * @param requestOptions Options for requesting information from AGOL\r\n   * @return A promise that will resolve with list of dependent ids\r\n   * @protected\r\n   */\r\n  function getDependencies$1(itemTemplate, requestOptions) {\r\n      return new Promise(function (resolve, reject) {\r\n          var pagingRequest = __assign({ paging: {\r\n                  start: 1,\r\n                  num: 100\r\n              } }, requestOptions);\r\n          // Fetch group items\r\n          getGroupContentsTranche(itemTemplate.itemId, pagingRequest)\r\n              .then(function (contents) {\r\n              // Update the estimated cost factor to deploy this item\r\n              itemTemplate.estimatedDeploymentCostFactor = 3 + contents.length;\r\n              resolve(contents);\r\n          }, function () { return reject({ success: false }); });\r\n      });\r\n  }\r\n  // -- Deploy Bundle Process ------------------------------------------------------------------------------------------//\r\n  function deployItem$1(itemTemplate, settings, requestOptions, progressCallback) {\r\n      progressCallback({\r\n          processId: itemTemplate.key,\r\n          type: itemTemplate.type,\r\n          status: \"starting\",\r\n          estimatedCostFactor: itemTemplate.estimatedDeploymentCostFactor\r\n      });\r\n      return new Promise(function (resolve, reject) {\r\n          var options = __assign({ group: itemTemplate.item }, requestOptions);\r\n          // Make the item title unique\r\n          options.group.title += \"_\" + getTimestamp();\r\n          // Create the item\r\n          progressCallback({\r\n              processId: itemTemplate.key,\r\n              status: \"creating\",\r\n          });\r\n          createGroup(options)\r\n              .then(function (createResponse) {\r\n              if (createResponse.success) {\r\n                  // Add the new item to the settings\r\n                  settings[deTemplatize(itemTemplate.itemId)] = {\r\n                      id: createResponse.group.id\r\n                  };\r\n                  itemTemplate.itemId = createResponse.group.id;\r\n                  itemTemplate = adlib(itemTemplate, settings);\r\n                  // Add the group's items to it\r\n                  addGroupMembers(itemTemplate, requestOptions, progressCallback)\r\n                      .then(function () {\r\n                      finalCallback(itemTemplate.key, true, progressCallback);\r\n                      resolve(itemTemplate);\r\n                  }, function () {\r\n                      finalCallback(itemTemplate.key, false, progressCallback);\r\n                      reject({ success: false });\r\n                  });\r\n              }\r\n              else {\r\n                  finalCallback(itemTemplate.key, false, progressCallback);\r\n                  reject({ success: false });\r\n              }\r\n          }, function () {\r\n              finalCallback(itemTemplate.key, false, progressCallback);\r\n              reject({ success: false });\r\n          });\r\n      });\r\n  }\r\n  // -- Internals ------------------------------------------------------------------------------------------------------//\r\n  // (export decoration is for unit testing)\r\n  /**\r\n   * Adds the members of a group to it.\r\n   *\r\n   * @param itemTemplate Group\r\n   * @param swizzles Hash mapping Solution source id to id of its clone\r\n   * @param requestOptions Options for the request\r\n   * @return A promise that will resolve when fullItem has been updated\r\n   * @protected\r\n   */\r\n  function addGroupMembers(itemTemplate, requestOptions, progressCallback) {\r\n      return new Promise(function (resolve, reject) {\r\n          // Add each of the group's items to it\r\n          if (itemTemplate.dependencies.length > 0) {\r\n              var awaitGroupAdds_1 = [];\r\n              itemTemplate.dependencies.forEach(function (depId) {\r\n                  awaitGroupAdds_1.push(new Promise(function (resolve2, reject2) {\r\n                      shareItemWithGroup(__assign({ id: depId, groupId: itemTemplate.itemId }, requestOptions))\r\n                          .then(function () {\r\n                          progressCallback({\r\n                              processId: itemTemplate.key,\r\n                              status: \"added group member\"\r\n                          });\r\n                          resolve2();\r\n                      }, function () {\r\n                          finalCallback(itemTemplate.key, false, progressCallback);\r\n                          reject2({ success: false });\r\n                      });\r\n                  }));\r\n              });\r\n              // After all items have been added to the group\r\n              Promise.all(awaitGroupAdds_1)\r\n                  .then(function () { return resolve(); }, function () { return reject({ success: false }); });\r\n          }\r\n          else {\r\n              // No items in this group\r\n              resolve();\r\n          }\r\n      });\r\n  }\r\n  /**\r\n   * Gets the ids of a group's contents.\r\n   *\r\n   * @param id Group id\r\n   * @param pagingRequest Options for requesting group contents; note: its paging.start parameter may\r\n   *                      be modified by this routine\r\n   * @return A promise that will resolve with a list of the ids of the group's contents\r\n   * @protected\r\n   */\r\n  function getGroupContentsTranche(id, pagingRequest) {\r\n      return new Promise(function (resolve, reject) {\r\n          // Fetch group items\r\n          getGroupContent(id, pagingRequest)\r\n              .then(function (contents) {\r\n              if (contents.num > 0) {\r\n                  // Extract the list of content ids from the JSON returned\r\n                  var trancheIds_1 = contents.items.map(function (item) { return item.id; });\r\n                  // Are there more contents to fetch?\r\n                  if (contents.nextStart > 0) {\r\n                      pagingRequest.paging.start = contents.nextStart;\r\n                      getGroupContentsTranche(id, pagingRequest)\r\n                          .then(function (allSubsequentTrancheIds) {\r\n                          // Append all of the following tranches to this tranche and return it\r\n                          resolve(trancheIds_1.concat(allSubsequentTrancheIds));\r\n                      }, function () { return reject({ success: false }); });\r\n                  }\r\n                  else {\r\n                      resolve(trancheIds_1);\r\n                  }\r\n              }\r\n              else {\r\n                  resolve([]);\r\n              }\r\n          }, function () { return reject({ success: false }); });\r\n      });\r\n  }\n\n  var GroupModule = /*#__PURE__*/Object.freeze({\n    completeItemTemplate: completeItemTemplate$1,\n    getDependencies: getDependencies$1,\n    deployItem: deployItem$1,\n    addGroupMembers: addGroupMembers,\n    getGroupContentsTranche: getGroupContentsTranche\n  });\n\n  /* Copyright (c) 2018-2019 Environmental Systems Research Institute, Inc.\n   * Apache-2.0 */\n  /**\n   * ```js\n   * import {\n   *   createFeatureService,\n   *   addToServiceDefinition\n   * } from '@esri/arcgis-rest-feature-service-admin';\n   * //\n   * createFeatureService({\n   *   authentication: userSession,\n   *   item: {\n   *     \"name\": \"NewEmptyService\",\n   *     \"capabilities\": \"Create,Delete,Query,Update,Editing\"\n   *   }\n   * });\n   * ```\n   * Create a new [hosted feature service](https://developers.arcgis.com/rest/users-groups-and-items/create-service.htm). After the service has been created, call [`addToServiceDefinition()`](../addToServiceDefinition/) if you'd like to update it's schema.\n   * @param requestOptions - Options for the request\n   * @returns A Promise that resolves with service details once the service has been created\n   */\n  function createFeatureService(requestOptions) {\n      var owner = determineOwner(requestOptions);\n      var baseUrl = getPortalUrl(requestOptions) + \"/content/users/\" + owner;\n      var url = baseUrl + \"/createService\";\n      // Create the service\n      requestOptions.params = __assign({ createParameters: requestOptions.item, outputType: \"featureService\" }, requestOptions.params);\n      if (!requestOptions.folderId || requestOptions.folderId === \"/\") {\n          // If the service is destined for the root folder, just send the request\n          return request(url, requestOptions);\n      }\n      else {\n          // If the service is destined for a subfolder, move it (via another call)\n          return request(url, requestOptions).then(function (createResponse) {\n              if (createResponse.success) {\n                  return moveItem({\n                      itemId: createResponse.itemId,\n                      folderId: requestOptions.folderId,\n                      authentication: requestOptions.authentication\n                  }).then(function (moveResponse) {\n                      if (moveResponse.success) {\n                          return createResponse;\n                      }\n                      else {\n                          throw Error(\"A problem was encountered when trying to move the service to a different folder.\");\n                      }\n                  });\n              }\n              else {\n                  throw Error(\"A problem was encountered when trying to create the service.\");\n              }\n          });\n      }\n  }\n\n  /* Copyright (c) 2018-2019 Environmental Systems Research Institute, Inc.\n   * Apache-2.0 */\n  /**\n   * ```js\n   * import { addToServiceDefinition } from '@esri/arcgis-rest-feature-service-admin';\n   * //\n   * addToServiceDefinition(serviceurl, {\n   *   authentication: userSession,\n   *   layers: [],\n   *   tables: []\n   * });\n   * ```\n   * Add layer(s) and/or table(s) to a hosted feature service. See the [REST Documentation](https://developers.arcgis.com/rest/services-reference/add-to-definition-feature-service-.htm) for more information.\n   *\n   * @param url - URL of feature service\n   * @param requestOptions - Options for the request\n   * @returns A Promise that resolves with service layer and/or table details once the definition\n   * has been updated\n   */\n  function addToServiceDefinition(url, requestOptions) {\n      var adminUrl = cleanUrl(url).replace(\"/rest/services\", \"/rest/admin/services\") + \"/addToDefinition\";\n      requestOptions.params = __assign({ addToDefinition: {} }, requestOptions.params);\n      if (requestOptions.layers && requestOptions.layers.length > 0) {\n          requestOptions.params.addToDefinition.layers = requestOptions.layers;\n      }\n      if (requestOptions.tables && requestOptions.tables.length > 0) {\n          requestOptions.params.addToDefinition.tables = requestOptions.tables;\n      }\n      return request(adminUrl, requestOptions);\n  }\n\n  /*\r\n   | Copyright 2018 Esri\r\n   |\r\n   | Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   | you may not use this file except in compliance with the License.\r\n   | You may obtain a copy of the License at\r\n   |\r\n   |    http://www.apache.org/licenses/LICENSE-2.0\r\n   |\r\n   | Unless required by applicable law or agreed to in writing, software\r\n   | distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   | See the License for the specific language governing permissions and\r\n   | limitations under the License.\r\n   */\r\n  // -- Externals ------------------------------------------------------------------------------------------------------//\r\n  // -- Create Bundle Process ------------------------------------------------------------------------------------------//\r\n  function completeItemTemplate$2(itemTemplate, requestOptions) {\r\n      return new Promise(function (resolve, reject) {\r\n          // Update the estimated cost factor to deploy this item\r\n          itemTemplate.estimatedDeploymentCostFactor = 3;\r\n          // Common templatizations: extent, item id, item dependency ids\r\n          doCommonTemplatizations(itemTemplate);\r\n          fleshOutFeatureService(itemTemplate, requestOptions)\r\n              .then(function () { return resolve(itemTemplate); }, function () { return reject({ success: false }); });\r\n      });\r\n  }\r\n  function getDependencies$2(itemTemplate, requestOptions) {\r\n      return new Promise(function (resolve) {\r\n          resolve([]);\r\n      });\r\n  }\r\n  // -- Deploy Bundle Process ------------------------------------------------------------------------------------------//\r\n  /**\r\n   * Creates an item in a specified folder (except for Group item type).\r\n   *\r\n   * @param itemTemplate Item to be created; n.b.: this item is modified\r\n   * @param folderId Id of folder to receive item; null indicates that the item goes into the root\r\n   *                 folder; ignored for Group item type\r\n   * @param settings Hash mapping property names to replacement values\r\n   * @param requestOptions Options for the request\r\n   * @return A promise that will resolve with the id of the created item\r\n   * @protected\r\n   */\r\n  function deployItem$2(itemTemplate, settings, requestOptions, progressCallback) {\r\n      progressCallback({\r\n          processId: itemTemplate.key,\r\n          type: itemTemplate.type,\r\n          status: \"starting\",\r\n          estimatedCostFactor: itemTemplate.estimatedDeploymentCostFactor\r\n      });\r\n      return new Promise(function (resolve, reject) {\r\n          var options = __assign({ item: itemTemplate.item, folderId: settings.folderId }, requestOptions);\r\n          if (itemTemplate.data) {\r\n              options.item.text = itemTemplate.data;\r\n          }\r\n          // Make the item name unique\r\n          options.item.name += \"_\" + getTimestamp();\r\n          // Create the item\r\n          progressCallback({\r\n              processId: itemTemplate.key,\r\n              status: \"creating\",\r\n          });\r\n          createFeatureService(options)\r\n              .then(function (createResponse) {\r\n              // Add the new item to the settings list\r\n              settings[deTemplatize(itemTemplate.itemId)] = {\r\n                  id: createResponse.serviceItemId,\r\n                  url: createResponse.serviceurl\r\n              };\r\n              itemTemplate.itemId = itemTemplate.item.id = createResponse.serviceItemId;\r\n              itemTemplate = adlib(itemTemplate, settings);\r\n              itemTemplate.item.url = createResponse.serviceurl;\r\n              // Add the feature service's layers and tables to it\r\n              addFeatureServiceLayersAndTables(itemTemplate, settings, requestOptions, progressCallback)\r\n                  .then(function () {\r\n                  finalCallback(itemTemplate.key, true, progressCallback);\r\n                  resolve(itemTemplate);\r\n              }, function () {\r\n                  finalCallback(itemTemplate.key, false, progressCallback);\r\n                  reject({ success: false });\r\n              });\r\n          }, function () {\r\n              finalCallback(itemTemplate.key, false, progressCallback);\r\n              reject({ success: false });\r\n          });\r\n      });\r\n  }\r\n  /**\r\n   * Adds the layers and tables of a feature service to it and restores their relationships.\r\n   *\r\n   * @param itemTemplate Feature service\r\n   * @param settings Hash mapping Solution source id to id of its clone (and name & URL for feature\r\n   *            service)\r\n   * @param requestOptions Options for the request\r\n   * @return A promise that will resolve when fullItem has been updated\r\n   * @protected\r\n   */\r\n  function addFeatureServiceLayersAndTables(itemTemplate, settings, requestOptions, progressCallback) {\r\n      return new Promise(function (resolve, reject) {\r\n          // Sort layers and tables by id so that they're added with the same ids\r\n          var properties = itemTemplate.properties;\r\n          var layersAndTables = [];\r\n          (properties.layers || []).forEach(function (layer) {\r\n              layersAndTables[layer.id] = {\r\n                  item: layer,\r\n                  type: \"layer\"\r\n              };\r\n          });\r\n          (properties.tables || []).forEach(function (table) {\r\n              layersAndTables[table.id] = {\r\n                  item: table,\r\n                  type: \"table\"\r\n              };\r\n          });\r\n          // Hold a hash of relationships\r\n          var relationships = {};\r\n          // Add the service's layers and tables to it\r\n          if (layersAndTables.length > 0) {\r\n              updateFeatureServiceDefinition(itemTemplate.itemId, itemTemplate.item.url, layersAndTables, settings, relationships, requestOptions, itemTemplate.key, progressCallback)\r\n                  .then(function () {\r\n                  // Restore relationships for all layers and tables in the service\r\n                  var awaitRelationshipUpdates = [];\r\n                  Object.keys(relationships).forEach(function (id) {\r\n                      awaitRelationshipUpdates.push(new Promise(function (resolveFn, rejectFn) {\r\n                          var options = __assign({ params: {\r\n                                  updateFeatureServiceDefinition: {\r\n                                      relationships: relationships[id]\r\n                                  }\r\n                              } }, requestOptions);\r\n                          addToServiceDefinition(itemTemplate.item.url + \"/\" + id, options)\r\n                              .then(function () {\r\n                              progressCallback({\r\n                                  processId: itemTemplate.key,\r\n                                  status: \"updated relationship\"\r\n                              });\r\n                              resolveFn();\r\n                          }, function () { return rejectFn(); });\r\n                      }));\r\n                  });\r\n                  Promise.all(awaitRelationshipUpdates)\r\n                      .then(function () { return resolve(); }, function () { return reject({ success: false }); });\r\n              }, function () { return reject({ success: false }); });\r\n          }\r\n          else {\r\n              resolve();\r\n          }\r\n      });\r\n  }\r\n  /**\r\n   * Fills in missing data, including full layer and table definitions, in a feature services' definition.\r\n   *\r\n   * @param itemTemplate Feature service item, data, dependencies definition to be modified\r\n   * @param requestOptions Options for requesting information from AGOL\r\n   * @return A promise that will resolve when fullItem has been updated\r\n   * @protected\r\n   */\r\n  function fleshOutFeatureService(itemTemplate, requestOptions) {\r\n      return new Promise(function (resolve, reject) {\r\n          var properties = {\r\n              service: {},\r\n              layers: [],\r\n              tables: []\r\n          };\r\n          // To have enough information for reconstructing the service, we'll supplement\r\n          // the item and data sections with sections for the service, full layers, and\r\n          // full tables\r\n          // Get the service description\r\n          var serviceUrl = itemTemplate.item.url;\r\n          itemTemplate.item.url = templatize(itemTemplate.itemId, \"url\");\r\n          request(serviceUrl + \"?f=json\", requestOptions)\r\n              .then(function (serviceData) {\r\n              // Fill in some missing parts\r\n              // If the service doesn't have a name, try to get a name from its layers or tables\r\n              serviceData[\"name\"] = itemTemplate.item[\"name\"] ||\r\n                  getFirstUsableName(serviceData[\"layers\"]) ||\r\n                  getFirstUsableName(serviceData[\"tables\"]) ||\r\n                  \"Feature Service\";\r\n              serviceData[\"snippet\"] = itemTemplate.item[\"snippet\"];\r\n              serviceData[\"description\"] = itemTemplate.item[\"description\"];\r\n              serviceData.serviceItemId = templatize(serviceData.serviceItemId);\r\n              properties.service = serviceData;\r\n              // Get the affiliated layer and table items\r\n              Promise.all([\r\n                  getLayers(serviceUrl, serviceData[\"layers\"], requestOptions),\r\n                  getLayers(serviceUrl, serviceData[\"tables\"], requestOptions)\r\n              ])\r\n                  .then(function (results) {\r\n                  properties.layers = results[0];\r\n                  properties.tables = results[1];\r\n                  itemTemplate.properties = properties;\r\n                  var reducer = function (accumulator, currentLayer) {\r\n                      return accumulator + (currentLayer.relationships ? currentLayer.relationships.length : 0);\r\n                  };\r\n                  itemTemplate.estimatedDeploymentCostFactor +=\r\n                      properties.layers.length + // layers\r\n                          properties.layers.reduce(reducer, 0) + // layer relationships\r\n                          properties.tables.length + // tables & estimated single relationship for each\r\n                          properties.tables.reduce(reducer, 0); // table relationships\r\n                  resolve();\r\n              }, function () { return reject({ success: false }); });\r\n          }, function () { return reject({ success: false }); });\r\n      });\r\n  }\r\n  /**\r\n   * Gets the name of the first layer in list of layers that has a name\r\n   * @param layerList List of layers to use as a name source\r\n   * @return The name of the found layer or an empty string if no layers have a name\r\n   * @protected\r\n   */\r\n  function getFirstUsableName(layerList) {\r\n      var name = \"\";\r\n      // Return the first layer name found\r\n      if (Array.isArray(layerList) && layerList.length > 0) {\r\n          layerList.some(function (layer) {\r\n              if (layer[\"name\"] !== \"\") {\r\n                  name = layer[\"name\"];\r\n                  return true;\r\n              }\r\n              return false;\r\n          });\r\n      }\r\n      return name;\r\n  }\r\n  /**\r\n   * Gets the full definitions of the layers affiliated with a hosted service.\r\n   *\r\n   * @param serviceUrl URL to hosted service\r\n   * @param layerList List of layers at that service\r\n   * @param requestOptions Options for the request\r\n   * @return A promise that will resolve with a list of the enhanced layers\r\n   * @protected\r\n   */\r\n  function getLayers(serviceUrl, layerList, requestOptions) {\r\n      return new Promise(function (resolve, reject) {\r\n          if (!Array.isArray(layerList) || layerList.length === 0) {\r\n              resolve([]);\r\n          }\r\n          var requestsDfd = [];\r\n          layerList.forEach(function (layer) {\r\n              requestsDfd.push(request(serviceUrl + \"/\" + layer[\"id\"] + \"?f=json\", requestOptions));\r\n          });\r\n          // Wait until all layers are heard from\r\n          Promise.all(requestsDfd)\r\n              .then(function (layers) {\r\n              // Remove the editFieldsInfo because it references fields that may not be in the layer/table;\r\n              // templatize the layer's serviceItemId\r\n              layers.forEach(function (layer) {\r\n                  layer[\"editFieldsInfo\"] = null;\r\n                  layer[\"serviceItemId\"] = templatize(layer[\"serviceItemId\"]);\r\n              });\r\n              resolve(layers);\r\n          }, function () { return reject({ success: false }); });\r\n      });\r\n  }\r\n  /**\r\n   * Updates a feature service with a list of layers and/or tables.\r\n   *\r\n   * @param serviceItemId AGOL id of feature service\r\n   * @param serviceUrl URL of feature service\r\n   * @param listToAdd List of layers and/or tables to add\r\n   * @param settings Hash mapping Solution source id to id of its clone (and name & URL for feature\r\n   *            service)\r\n   * @param relationships Hash mapping a layer's relationship id to the ids of its relationships\r\n   * @param requestOptions Options for requesting information from AGOL\r\n   * @return A promise that will resolve when the feature service has been updated\r\n   * @protected\r\n   */\r\n  function updateFeatureServiceDefinition(serviceItemId, serviceUrl, listToAdd, settings, relationships, requestOptions, key, progressCallback) {\r\n      // Launch the adds serially because server doesn't support parallel adds\r\n      return new Promise(function (resolve, reject) {\r\n          if (listToAdd.length > 0) {\r\n              var toAdd = listToAdd.shift();\r\n              var item = toAdd.item;\r\n              var originalId = item.id;\r\n              delete item.serviceItemId; // Updated by updateFeatureServiceDefinition\r\n              // Need to remove relationships and add them back individually after all layers and tables\r\n              // have been added to the definition\r\n              if (Array.isArray(item.relationships) && item.relationships.length > 0) {\r\n                  relationships[originalId] = item.relationships;\r\n                  item.relationships = [];\r\n              }\r\n              var options = __assign({}, requestOptions);\r\n              // Need to add layers and tables one at a time, waiting until one is complete before moving on to the next one\r\n              if (toAdd.type === \"layer\") {\r\n                  item.adminLayerInfo = {\r\n                      \"geometryField\": {\r\n                          \"name\": \"Shape\",\r\n                          \"srid\": 102100\r\n                      }\r\n                  };\r\n                  options.layers = [item];\r\n              }\r\n              else {\r\n                  options.tables = [item];\r\n              }\r\n              addToServiceDefinition(serviceUrl, options)\r\n                  .then(function () {\r\n                  progressCallback({\r\n                      processId: key,\r\n                      status: \"added layer\"\r\n                  });\r\n                  updateFeatureServiceDefinition(serviceItemId, serviceUrl, listToAdd, settings, relationships, requestOptions, key, progressCallback)\r\n                      .then(function () { return resolve(); }, function () { return reject({ success: false }); });\r\n              }, function () { return reject({ success: false }); });\r\n          }\r\n          else {\r\n              resolve();\r\n          }\r\n      });\r\n  }\n\n  var FeatureServiceModule = /*#__PURE__*/Object.freeze({\n    completeItemTemplate: completeItemTemplate$2,\n    getDependencies: getDependencies$2,\n    deployItem: deployItem$2,\n    addFeatureServiceLayersAndTables: addFeatureServiceLayersAndTables,\n    fleshOutFeatureService: fleshOutFeatureService\n  });\n\n  /*\r\n   | Copyright 2018 Esri\r\n   |\r\n   | Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   | you may not use this file except in compliance with the License.\r\n   | You may obtain a copy of the License at\r\n   |\r\n   |    http://www.apache.org/licenses/LICENSE-2.0\r\n   |\r\n   | Unless required by applicable law or agreed to in writing, software\r\n   | distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   | See the License for the specific language governing permissions and\r\n   | limitations under the License.\r\n   */\r\n  // -------------------------------------------------------------------------------------------------------------------//\r\n  /**\r\n   * The portion of a Webmap URL between the server and the map id.\r\n   * @protected\r\n   */\r\n  var WEBMAP_APP_URL_PART = \"/home/webmap/viewer.html?webmap=\";\r\n  // -- Externals ------------------------------------------------------------------------------------------------------//\r\n  // -- Create Bundle Process ------------------------------------------------------------------------------------------//\r\n  function completeItemTemplate$3(itemTemplate, requestOptions) {\r\n      return new Promise(function (resolve) {\r\n          // Update the estimated cost factor to deploy this item\r\n          itemTemplate.estimatedDeploymentCostFactor = 4;\r\n          // Common templatizations: extent, item id, item dependency ids\r\n          doCommonTemplatizations(itemTemplate);\r\n          // Templatize the app URL\r\n          itemTemplate.item.url =\r\n              PLACEHOLDER_SERVER_NAME + WEBMAP_APP_URL_PART + templatize(itemTemplate.itemId);\r\n          // Templatize the map layer ids\r\n          if (itemTemplate.data) {\r\n              templatizeWebmapLayerIdsAndUrls(itemTemplate.data.operationalLayers);\r\n              templatizeWebmapLayerIdsAndUrls(itemTemplate.data.tables);\r\n          }\r\n          resolve(itemTemplate);\r\n      });\r\n  }\r\n  /**\r\n   * Gets the ids of the dependencies of an AGOL webmap item.\r\n   *\r\n   * @param fullItem A webmap item whose dependencies are sought\r\n   * @param requestOptions Options for requesting information from AGOL\r\n   * @return A promise that will resolve with list of dependent ids\r\n   * @protected\r\n   */\r\n  function getDependencies$3(itemTemplate, requestOptions) {\r\n      return new Promise(function (resolve) {\r\n          var dependencies = [];\r\n          if (itemTemplate.data) {\r\n              dependencies = getWebmapLayerIds(itemTemplate.data.operationalLayers).concat(getWebmapLayerIds(itemTemplate.data.tables));\r\n          }\r\n          resolve(dependencies);\r\n      });\r\n  }\r\n  // -- Deploy Bundle Process ------------------------------------------------------------------------------------------//\r\n  function deployItem$3(itemTemplate, settings, requestOptions, progressCallback) {\r\n      progressCallback({\r\n          processId: itemTemplate.key,\r\n          type: itemTemplate.type,\r\n          status: \"starting\",\r\n          estimatedCostFactor: itemTemplate.estimatedDeploymentCostFactor\r\n      });\r\n      return new Promise(function (resolve, reject) {\r\n          var options = __assign({ item: itemTemplate.item, folder: settings.folderId }, requestOptions);\r\n          if (itemTemplate.data) {\r\n              options.item.text = itemTemplate.data;\r\n          }\r\n          // Create the item\r\n          progressCallback({\r\n              processId: itemTemplate.key,\r\n              status: \"creating\",\r\n          });\r\n          createItemInFolder(options)\r\n              .then(function (createResponse) {\r\n              if (createResponse.success) {\r\n                  // Add the new item to the settings\r\n                  settings[deTemplatize(itemTemplate.itemId)] = {\r\n                      id: createResponse.id\r\n                  };\r\n                  itemTemplate.itemId = itemTemplate.item.id = createResponse.id;\r\n                  itemTemplate = adlib(itemTemplate, settings);\r\n                  // Update the app URL\r\n                  progressCallback({\r\n                      processId: itemTemplate.key,\r\n                      status: \"updating URL\"\r\n                  });\r\n                  updateItemURL(itemTemplate.itemId, itemTemplate.item.url, requestOptions)\r\n                      .then(function () {\r\n                      finalCallback(itemTemplate.key, true, progressCallback);\r\n                      resolve(itemTemplate);\r\n                  }, function () {\r\n                      finalCallback(itemTemplate.key, false, progressCallback);\r\n                      reject({ success: false });\r\n                  });\r\n              }\r\n              else {\r\n                  finalCallback(itemTemplate.key, false, progressCallback);\r\n                  reject({ success: false });\r\n              }\r\n          }, function () {\r\n              finalCallback(itemTemplate.key, false, progressCallback);\r\n              reject({ success: false });\r\n          });\r\n      });\r\n  }\r\n  // -- Internals ------------------------------------------------------------------------------------------------------//\r\n  // (export decoration is for unit testing)\r\n  /**\r\n   * Extracts the AGOL id or URL for each layer or table object in a list.\r\n   *\r\n   * @param layerList List of map layers or tables\r\n   * @return List containing id of each layer or table that has an itemId\r\n   * @protected\r\n   */\r\n  function getWebmapLayerIds(layerList) {\r\n      if (layerList === void 0) { layerList = []; }\r\n      return layerList.reduce(function (ids, layer) {\r\n          var itemId = layer.itemId;\r\n          if (itemId) {\r\n              ids.push(itemId);\r\n          }\r\n          return ids;\r\n      }, []);\r\n  }\r\n  function templatizeWebmapLayerIdsAndUrls(layerList) {\r\n      if (layerList === void 0) { layerList = []; }\r\n      layerList.forEach(function (layer) {\r\n          var layerId = layer.url.substr(layer.url.lastIndexOf(\"/\"));\r\n          layer.itemId = templatize(layer.itemId);\r\n          layer.url = templatize(deTemplatize(layer.itemId), \"url\") + layerId;\r\n      });\r\n  }\n\n  var WebMapModule = /*#__PURE__*/Object.freeze({\n    completeItemTemplate: completeItemTemplate$3,\n    getDependencies: getDependencies$3,\n    deployItem: deployItem$3,\n    getWebmapLayerIds: getWebmapLayerIds,\n    templatizeWebmapLayerIdsAndUrls: templatizeWebmapLayerIdsAndUrls\n  });\n\n  /*\r\n   | Copyright 2018 Esri\r\n   |\r\n   | Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   | you may not use this file except in compliance with the License.\r\n   | You may obtain a copy of the License at\r\n   |\r\n   |    http://www.apache.org/licenses/LICENSE-2.0\r\n   |\r\n   | Unless required by applicable law or agreed to in writing, software\r\n   | distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   | See the License for the specific language governing permissions and\r\n   | limitations under the License.\r\n   */\r\n  /**\r\n   * Return a list of items this depends on\r\n   */\r\n  function getDependencies$4(model) {\r\n      // unknown types have no deps...\r\n      var processor = function (m) { return []; };\r\n      // find known types by typeKeyword\r\n      if (hasTypeKeyword(model, 'Cascade')) {\r\n          processor = getCascadeDependencies;\r\n      }\r\n      if (hasTypeKeyword(model, 'MapJournal')) {\r\n          processor = getMapJournalDependencies;\r\n      }\r\n      if (hasTypeKeyword(model, 'mapseries')) {\r\n          processor = getMapSeriesDependencies;\r\n      }\r\n      // execute\r\n      return Promise.resolve(processor(model));\r\n  }\r\n  /**\r\n   * Cascade specific logic\r\n   */\r\n  function getCascadeDependencies(model) {\r\n      // Cascade Example QA b908258efbba4f019450db46382a0c13\r\n      var sections = getProp(model, 'data.values.sections') || [];\r\n      return sections.reduce(function (a, s) {\r\n          return a.concat(getDeepValues(s, 'webmap').map(function (e) {\r\n              return e.id;\r\n          }));\r\n      }, []);\r\n  }\r\n  /**\r\n   * Map Series specific logic\r\n   */\r\n  function getMapSeriesDependencies(model) {\r\n      var deps = getProps(model, ['data.values.webmap']);\r\n      var entries = getProp(model, 'data.values.story.entries') || [];\r\n      entries.forEach(function (e) {\r\n          var entryWebmaps = getDeepValues(e, 'webmap').map(function (obj) {\r\n              return obj.id;\r\n          });\r\n          // may be dupes...\r\n          entryWebmaps.forEach(function (id) {\r\n              if (deps.indexOf(id) === -1) {\r\n                  deps.push(id);\r\n              }\r\n          });\r\n      });\r\n      return deps;\r\n  }\r\n  function getMapJournalDependencies(model) {\r\n      // MapJournal example QA 4c4d084c22d249fdbb032e4143c62546\r\n      var sections = getProp(model, 'data.values.story.sections') || [];\r\n      var deps = sections.reduce(function (a, s) {\r\n          if (s.media) {\r\n              if (s.media.type === 'webmap') {\r\n                  var v = getProp(s, 'media.webmap.id');\r\n                  if (v) {\r\n                      a.push(v);\r\n                  }\r\n              }\r\n              if (s.media.type === 'webpage') {\r\n                  var url = getProp(s, 'media.webpage.url');\r\n                  var id = parseIdFromUrl(url);\r\n                  if (id) {\r\n                      a.push(id);\r\n                  }\r\n              }\r\n          }\r\n          return a;\r\n      }, []);\r\n      return deps;\r\n  }\n\n  /*\r\n   | Copyright 2018 Esri\r\n   |\r\n   | Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   | you may not use this file except in compliance with the License.\r\n   | You may obtain a copy of the License at\r\n   |\r\n   |    http://www.apache.org/licenses/LICENSE-2.0\r\n   |\r\n   | Unless required by applicable law or agreed to in writing, software\r\n   | distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   | See the License for the specific language governing permissions and\r\n   | limitations under the License.\r\n   */\r\n  /**\r\n   * Return a list of items this site depends on\r\n   */\r\n  function getDependencies$5(model) {\r\n      var deps = [];\r\n      var v = getProp(model, 'data.map.itemId');\r\n      if (v) {\r\n          deps.push(v);\r\n      }\r\n      return Promise.resolve(deps);\r\n  }\n\n  /*\r\n   | Copyright 2018 Esri\r\n   |\r\n   | Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   | you may not use this file except in compliance with the License.\r\n   | You may obtain a copy of the License at\r\n   |\r\n   |    http://www.apache.org/licenses/LICENSE-2.0\r\n   |\r\n   | Unless required by applicable law or agreed to in writing, software\r\n   | distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   | See the License for the specific language governing permissions and\r\n   | limitations under the License.\r\n   */\r\n  // -- Externals ------------------------------------------------------------------------------------------------------//\r\n  // -- Create Bundle Process ------------------------------------------------------------------------------------------//\r\n  function completeItemTemplate$4(itemTemplate, requestOptions) {\r\n      return new Promise(function (resolve) {\r\n          // Update the estimated cost factor to deploy this item\r\n          itemTemplate.estimatedDeploymentCostFactor = 4;\r\n          // Common templatizations: extent, item id, item dependency ids\r\n          doCommonTemplatizations(itemTemplate);\r\n          // Remove org base URL and app id, e.g.,\r\n          //   http://statelocaltryit.maps.arcgis.com/apps/CrowdsourcePolling/index.html?appid=6fc5992522d34f26b2210d17835eea21\r\n          // to\r\n          //   <PLACEHOLDER_SERVER_NAME>/apps/CrowdsourcePolling/index.html?appid={{<itemId>.id}}\r\n          // Need to add placeholder server name because otherwise AGOL makes URL null\r\n          var templatizedUrl = itemTemplate.item.url;\r\n          var iSep = templatizedUrl.indexOf(\"//\");\r\n          itemTemplate.item.url = PLACEHOLDER_SERVER_NAME + // add placeholder server name\r\n              templatizedUrl.substring(templatizedUrl.indexOf(\"/\", iSep + 2), templatizedUrl.lastIndexOf(\"=\") + 1) +\r\n              templatize(itemTemplate.itemId);\r\n          // Set the folder\r\n          if (getProp(itemTemplate, \"data.folderId\")) {\r\n              itemTemplate.data.folderId = \"{{folderId}}\";\r\n          }\r\n          // Set the map or group\r\n          if (getProp(itemTemplate, \"data.values.webmap\")) {\r\n              itemTemplate.data.values.webmap = templatize(itemTemplate.data.values.webmap);\r\n          }\r\n          else if (getProp(itemTemplate, \"data.values.group\")) {\r\n              itemTemplate.data.values.group = templatize(itemTemplate.data.values.group);\r\n          }\r\n          resolve(itemTemplate);\r\n      });\r\n  }\r\n  /**\r\n   * Gets the ids of the dependencies of an AGOL webapp item.\r\n   *\r\n   * @param fullItem A webapp item whose dependencies are sought\r\n   * @return A promise that will resolve with list of dependent ids\r\n   * @protected\r\n   */\r\n  function getDependencies$6(model) {\r\n      var processor = getGenericWebAppDependencies;\r\n      if (hasTypeKeyword(model, 'Story Map')) {\r\n          processor = getDependencies$4;\r\n      }\r\n      if (hasAnyKeyword(model, ['WAB2D', 'WAB3D', 'Web AppBuilder'])) {\r\n          processor = getDependencies$5;\r\n      }\r\n      return processor(model);\r\n  }\r\n  /**\r\n   * Generic Web App Dependencies\r\n   */\r\n  function getGenericWebAppDependencies(model) {\r\n      var props = ['data.webmap', 'data.itemId', 'data.values.webmap', 'data.values.group'];\r\n      return Promise.resolve(getProps(model, props));\r\n  }\r\n  // -- Deploy Bundle Process ------------------------------------------------------------------------------------------//\r\n  function deployItem$4(itemTemplate, settings, requestOptions, progressCallback) {\r\n      progressCallback({\r\n          processId: itemTemplate.key,\r\n          type: itemTemplate.type,\r\n          status: \"starting\",\r\n          estimatedCostFactor: itemTemplate.estimatedDeploymentCostFactor\r\n      });\r\n      return new Promise(function (resolve, reject) {\r\n          var options = __assign({ item: itemTemplate.item, folder: settings.folderId }, requestOptions);\r\n          if (itemTemplate.data) {\r\n              options.item.text = itemTemplate.data;\r\n          }\r\n          // Create the item\r\n          progressCallback({\r\n              processId: itemTemplate.key,\r\n              status: \"creating\",\r\n          });\r\n          createItemInFolder(options)\r\n              .then(function (createResponse) {\r\n              if (createResponse.success) {\r\n                  // Add the new item to the settings\r\n                  settings[deTemplatize(itemTemplate.itemId)] = {\r\n                      id: createResponse.id\r\n                  };\r\n                  itemTemplate.itemId = itemTemplate.item.id = createResponse.id;\r\n                  itemTemplate = adlib(itemTemplate, settings);\r\n                  // Update the app URL\r\n                  progressCallback({\r\n                      processId: itemTemplate.key,\r\n                      status: \"updating URL\"\r\n                  });\r\n                  updateItemURL(itemTemplate.itemId, itemTemplate.item.url, requestOptions)\r\n                      .then(function () {\r\n                      finalCallback(itemTemplate.key, true, progressCallback);\r\n                      resolve(itemTemplate);\r\n                  }, function () {\r\n                      finalCallback(itemTemplate.key, false, progressCallback);\r\n                      reject({ success: false });\r\n                  });\r\n              }\r\n              else {\r\n                  finalCallback(itemTemplate.key, false, progressCallback);\r\n                  reject({ success: false });\r\n              }\r\n          }, function () {\r\n              finalCallback(itemTemplate.key, false, progressCallback);\r\n              reject({ success: false });\r\n          });\r\n      });\r\n  }\n\n  var WebMappingApplicationModule = /*#__PURE__*/Object.freeze({\n    completeItemTemplate: completeItemTemplate$4,\n    getDependencies: getDependencies$6,\n    getGenericWebAppDependencies: getGenericWebAppDependencies,\n    deployItem: deployItem$4\n  });\n\n  /*\r\n   | Copyright 2018 Esri\r\n   |\r\n   | Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   | you may not use this file except in compliance with the License.\r\n   | You may obtain a copy of the License at\r\n   |\r\n   |    http://www.apache.org/licenses/LICENSE-2.0\r\n   |\r\n   | Unless required by applicable law or agreed to in writing, software\r\n   | distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   | See the License for the specific language governing permissions and\r\n   | limitations under the License.\r\n   */\r\n  // -- Externals ------------------------------------------------------------------------------------------------------//\r\n  // -- Create Bundle Process ------------------------------------------------------------------------------------------//\r\n  function completeItemTemplate$5(itemTemplate, requestOptions) {\r\n      return new Promise(function (resolve) {\r\n          // Common templatizations: extent, item id, item dependency ids\r\n          doCommonTemplatizations(itemTemplate);\r\n          resolve(itemTemplate);\r\n      });\r\n  }\r\n  function getDependencies$7(itemTemplate, requestOptions) {\r\n      return new Promise(function (resolve) {\r\n          resolve([]);\r\n      });\r\n  }\r\n  // -- Deploy Bundle Process ------------------------------------------------------------------------------------------//\r\n  function deployItem$5(itemTemplate, settings, requestOptions, progressCallback) {\r\n      progressCallback({\r\n          processId: itemTemplate.key,\r\n          type: itemTemplate.type,\r\n          status: \"starting\",\r\n          estimatedCostFactor: itemTemplate.estimatedDeploymentCostFactor\r\n      });\r\n      return new Promise(function (resolve, reject) {\r\n          var options = __assign({ item: itemTemplate.item, folder: settings.folderId }, requestOptions);\r\n          if (itemTemplate.data) {\r\n              options.item.text = itemTemplate.data;\r\n          }\r\n          // Create the item\r\n          progressCallback({\r\n              processId: itemTemplate.key,\r\n              status: \"creating\",\r\n          });\r\n          createItemInFolder(options)\r\n              .then(function (createResponse) {\r\n              if (createResponse.success) {\r\n                  // Add the new item to the settings\r\n                  settings[deTemplatize(itemTemplate.itemId)] = {\r\n                      id: createResponse.id\r\n                  };\r\n                  itemTemplate.itemId = itemTemplate.item.id = createResponse.id;\r\n                  itemTemplate = adlib(itemTemplate, settings);\r\n                  finalCallback(itemTemplate.key, true, progressCallback);\r\n                  resolve(itemTemplate);\r\n              }\r\n              else {\r\n                  finalCallback(itemTemplate.key, false, progressCallback);\r\n                  reject({ success: false });\r\n              }\r\n          }, function () {\r\n              finalCallback(itemTemplate.key, false, progressCallback);\r\n              reject({ success: false });\r\n          });\r\n      });\r\n  }\n\n  var GenericModule = /*#__PURE__*/Object.freeze({\n    completeItemTemplate: completeItemTemplate$5,\n    getDependencies: getDependencies$7,\n    deployItem: deployItem$5\n  });\n\n  /*\r\n   | Copyright 2018 Esri\r\n   |\r\n   | Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   | you may not use this file except in compliance with the License.\r\n   | You may obtain a copy of the License at\r\n   |\r\n   |    http://www.apache.org/licenses/LICENSE-2.0\r\n   |\r\n   | Unless required by applicable law or agreed to in writing, software\r\n   | distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   | See the License for the specific language governing permissions and\r\n   | limitations under the License.\r\n   */\r\n  var moduleMap = {\r\n      \"dashboard\": DashboardModule,\r\n      \"feature service\": FeatureServiceModule,\r\n      \"group\": GroupModule,\r\n      \"web map\": WebMapModule,\r\n      \"web mapping application\": WebMappingApplicationModule\r\n  };\r\n  // -- Externals ------------------------------------------------------------------------------------------------------//\r\n  /**\r\n   * Fetches the item and data sections, the resource and dependencies lists, and the item-type-specific\r\n   * functions for an item using its AGOL item id.\r\n   *\r\n   * @param itemId\r\n   * @param requestOptions\r\n   */\r\n  function initItemTemplateFromId(itemId, requestOptions) {\r\n      return new Promise(function (resolve, reject) {\r\n          var itemTemplate;\r\n          // Request item base section\r\n          getItem(itemId, requestOptions)\r\n              .then(function (itemResponse) {\r\n              if (!moduleMap[itemResponse.type.toLowerCase()]) {\r\n                  console.warn(\"Unimplemented item type \" + itemResponse.type);\r\n              }\r\n              itemTemplate = {\r\n                  itemId: itemResponse.id,\r\n                  type: itemResponse.type,\r\n                  key: createId(),\r\n                  item: removeUndesirableItemProperties(itemResponse),\r\n                  dependencies: [],\r\n                  fcns: moduleMap[itemResponse.type.toLowerCase()] || GenericModule,\r\n                  estimatedDeploymentCostFactor: 3 // minimal set is starting, creating, done|failed\r\n              };\r\n              itemTemplate.item.id = templatize(itemTemplate.item.id);\r\n              if (itemTemplate.item.item) {\r\n                  itemTemplate.item.item = templatize(itemTemplate.item.item);\r\n              }\r\n              // Request item data section\r\n              var dataPromise = getItemData(itemId, requestOptions);\r\n              // Request item resources\r\n              var resourceRequestOptions = __assign({ id: itemId }, requestOptions);\r\n              var resourcePromise = getItemResources(resourceRequestOptions);\r\n              // Items without a data section return an error from the REST library, so we'll need to prevent it\r\n              // from killing off both promises. This means that there's no `reject` clause to handle, hence:\r\n              // tslint:disable-next-line:no-floating-promises\r\n              Promise.all([\r\n                  dataPromise.catch(function () { return null; }),\r\n                  resourcePromise.catch(function () { return null; })\r\n              ])\r\n                  .then(function (responses) {\r\n                  var dataResponse = responses[0], resourceResponse = responses[1];\r\n                  itemTemplate.data = dataResponse;\r\n                  itemTemplate.resources = resourceResponse && resourceResponse.total > 0 ? resourceResponse.resources : null;\r\n                  // Complete item\r\n                  var completionPromise = itemTemplate.fcns.completeItemTemplate(itemTemplate, requestOptions);\r\n                  // Request item dependencies\r\n                  var dependenciesPromise = itemTemplate.fcns.getDependencies(itemTemplate, requestOptions);\r\n                  Promise.all([\r\n                      completionPromise,\r\n                      dependenciesPromise\r\n                  ])\r\n                      .then(function (responses2) {\r\n                      var completionResponse = responses2[0], dependenciesResponse = responses2[1];\r\n                      itemTemplate = completionResponse;\r\n                      itemTemplate.dependencies = removeDuplicates(deTemplatizeList(dependenciesResponse));\r\n                      resolve(itemTemplate);\r\n                  }, function () { return reject({ success: false }); });\r\n              });\r\n          }, function () {\r\n              // If item query fails, try URL for group base section\r\n              getGroup(itemId, requestOptions)\r\n                  .then(function (itemResponse) {\r\n                  itemTemplate = {\r\n                      itemId: itemResponse.id,\r\n                      type: \"Group\",\r\n                      key: createId(),\r\n                      item: removeUndesirableItemProperties(itemResponse),\r\n                      dependencies: [],\r\n                      fcns: moduleMap[\"group\"]\r\n                  };\r\n                  // Complete item\r\n                  var completionPromise = itemTemplate.fcns.completeItemTemplate(itemTemplate, requestOptions);\r\n                  // Request item dependencies (i.e., the group's contents)\r\n                  var dependenciesPromise = itemTemplate.fcns.getDependencies(itemTemplate, requestOptions);\r\n                  Promise.all([\r\n                      completionPromise,\r\n                      dependenciesPromise\r\n                  ])\r\n                      .then(function (responses2) {\r\n                      var completionResponse = responses2[0], dependenciesResponse = responses2[1];\r\n                      itemTemplate = completionResponse;\r\n                      itemTemplate.dependencies = removeDuplicates(deTemplatizeList(dependenciesResponse));\r\n                      resolve(itemTemplate);\r\n                  }, function () { return reject({ success: false }); });\r\n              }, function () { return reject({ success: false }); });\r\n          });\r\n      });\r\n  }\r\n  function initItemTemplateFromJSON(itemTemplate) {\r\n      itemTemplate.fcns = moduleMap[itemTemplate.type.toLowerCase()] || GenericModule;\r\n      return itemTemplate;\r\n  }\r\n  // -- Internals ------------------------------------------------------------------------------------------------------//\r\n  // (export decoration is for unit testing)\r\n  /**\r\n   * Removes duplicates from an array of strings.\r\n   *\r\n   * @param arrayWithDups An array to be copied\r\n   * @return Copy of array with duplicates removed\r\n   * @protected\r\n   */\r\n  function removeDuplicates(arrayWithDups) {\r\n      var uniqueStrings = {};\r\n      arrayWithDups.forEach(function (arrayElem) { return uniqueStrings[arrayElem] = true; });\r\n      return Object.keys(uniqueStrings);\r\n  }\r\n  /**\r\n   * Creates a copy of item base properties with properties irrelevant to cloning removed.\r\n   *\r\n   * @param item The base section of an item\r\n   * @return Cloned copy of item without certain properties such as `created`, `modified`,\r\n   *        `owner`,...; note that is is a shallow copy\r\n   * @protected\r\n   */\r\n  function removeUndesirableItemProperties(item) {\r\n      if (item) {\r\n          var itemSectionClone = __assign({}, item);\r\n          delete itemSectionClone.avgRating;\r\n          delete itemSectionClone.created;\r\n          delete itemSectionClone.guid;\r\n          delete itemSectionClone.lastModified;\r\n          delete itemSectionClone.modified;\r\n          delete itemSectionClone.numComments;\r\n          delete itemSectionClone.numRatings;\r\n          delete itemSectionClone.numViews;\r\n          delete itemSectionClone.orgId;\r\n          delete itemSectionClone.owner;\r\n          delete itemSectionClone.scoreCompleteness;\r\n          delete itemSectionClone.size;\r\n          delete itemSectionClone.uploaded;\r\n          return itemSectionClone;\r\n      }\r\n      return null;\r\n  }\n\n  /*\r\n   | Copyright 2018 Esri\r\n   |\r\n   | Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   | you may not use this file except in compliance with the License.\r\n   | You may obtain a copy of the License at\r\n   |\r\n   |    http://www.apache.org/licenses/LICENSE-2.0\r\n   |\r\n   | Unless required by applicable law or agreed to in writing, software\r\n   | distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   | See the License for the specific language governing permissions and\r\n   | limitations under the License.\r\n   */\r\n  // -- Externals ------------------------------------------------------------------------------------------------------//\r\n  /**\r\n   * Converts one or more AGOL items and their dependencies into a hash by id of JSON item descriptions.\r\n   *\r\n   * ```typescript\r\n   * import { ITemplate[] } from \"../src/fullItemHierarchy\";\r\n   * import { createSolution } from \"../src/solution\";\r\n   *\r\n   * getFullItemHierarchy([\"6fc5992522d34f26b2210d17835eea21\", \"9bccd0fac5f3422c948e15c101c26934\"])\r\n   * .then(\r\n   *   (response:ITemplate[]) => {\r\n   *     let keys = Object.keys(response);\r\n   *     console.log(keys.length);  // => \"6\"\r\n   *     console.log((response[keys[0]] as ITemplate).type);  // => \"Web Mapping Application\"\r\n   *     console.log((response[keys[0]] as ITemplate).item.title);  // => \"ROW Permit Public Comment\"\r\n   *     console.log((response[keys[0]] as ITemplate).text.source);  // => \"bb3fcf7c3d804271bfd7ac6f48290fcf\"\r\n   *   },\r\n   *   error => {\r\n   *     // (should not see this as long as both of the above ids--real ones--stay available)\r\n   *     console.log(error); // => \"Item or group does not exist or is inaccessible: \" + the problem id number\r\n   *   }\r\n   * );\r\n   * ```\r\n   *\r\n   * @param solutionRootIds AGOL id string or list of AGOL id strings\r\n   * @param requestOptions Options for requesting information from AGOL\r\n   * @return A promise that will resolve with a hash by id of IFullItems;\r\n   * if any id is inaccessible, a single error response will be produced for the set\r\n   * of ids\r\n   */\r\n  function createSolution(solutionRootIds, requestOptions) {\r\n      return new Promise(function (resolve, reject) {\r\n          // Get the items forming the solution\r\n          getItemTemplateHierarchy(solutionRootIds, requestOptions)\r\n              .then(function (solution) { return resolve(solution); }, function () { return reject({ success: false }); });\r\n      });\r\n  }\r\n  /**\r\n   * Creates a Solution item containing JSON descriptions of items forming the solution.\r\n   *\r\n   * @param title Title for Solution item to create\r\n   * @param solution Hash of JSON descriptions of items to publish into Solution\r\n   * @param requestOptions Options for the request\r\n   * @param folderId Id of folder to receive item; null/empty indicates that the item goes into the root\r\n   *                 folder; ignored for Group item type\r\n   * @param access Access to set for item: 'public', 'org', 'private'\r\n   * @return A promise that will resolve with an object reporting success and the Solution id\r\n   */\r\n  function publishSolution(title, solution, requestOptions, folderId, access) {\r\n      if (folderId === void 0) { folderId = null; }\r\n      if (access === void 0) { access = \"private\"; }\r\n      // Define the solution item\r\n      var item = {\r\n          title: title,\r\n          type: \"Solution\",\r\n          itemType: \"text\",\r\n          typeKeywords: [\"Template\"],\r\n          access: access,\r\n          listed: false,\r\n          commentsEnabled: false\r\n      };\r\n      var data = {\r\n          templates: solution\r\n      };\r\n      return createItemWithData(item, data, requestOptions, folderId, access);\r\n  }\r\n  function getEstimatedDeploymentCost(solution) {\r\n      // Get the total estimated cost of creating this solution\r\n      var reducer = function (accumulator, currentTemplate) {\r\n          return accumulator + (currentTemplate.estimatedDeploymentCostFactor ?\r\n              currentTemplate.estimatedDeploymentCostFactor : 3);\r\n      };\r\n      return solution.reduce(reducer, 0);\r\n  }\r\n  /**\r\n   * Converts a hash by id of generic JSON item descriptions into AGOL items.\r\n   *\r\n   * @param solution A hash of item descriptions to convert; note that the item ids are updated\r\n   *     to their cloned versions\r\n   * @param requestOptions Options for the request\r\n   * @param orgUrl The base URL for the AGOL organization, e.g., https://myOrg.maps.arcgis.com\r\n   * @param portalUrl The base URL for the portal, e.g., https://www.arcgis.com\r\n   * @param solutionName Name root to use if folder is to be created\r\n   * @param folderId AGOL id of folder to receive item, or null/empty if folder is to be created;\r\n   *     if created, folder name is a combination of the solution name and a timestamp for uniqueness,\r\n   *     e.g., \"Dashboard (1540841846958)\"\r\n   * @param access Access to set for item: 'public', 'org', 'private'\r\n   * @return A promise that will resolve with a list of the ids of items created in AGOL\r\n   */\r\n  function deploySolution(solution, requestOptions, settings, progressCallback) {\r\n      if (settings === void 0) { settings = {}; }\r\n      return new Promise(function (resolve, reject) {\r\n          var clonedSolution = [];\r\n          // Don't bother creating folder if there are no items in solution\r\n          if (!solution || Object.keys(solution).length === 0) {\r\n              resolve(clonedSolution);\r\n          }\r\n          // Run through the list of item ids in clone order\r\n          var cloneOrderChecklist = topologicallySortItems(solution);\r\n          // -------------------------------------------------------------------------\r\n          function runThroughChecklist() {\r\n              if (cloneOrderChecklist.length === 0) {\r\n                  resolve(clonedSolution);\r\n                  return;\r\n              }\r\n              // Clone item at top of list\r\n              var itemId = cloneOrderChecklist.shift();\r\n              var itemTemplate = initItemTemplateFromJSON(getTemplateInSolution(solution, itemId));\r\n              // Interpolate template\r\n              itemTemplate.dependencies = itemTemplate.dependencies ? templatizeList(itemTemplate.dependencies) : [];\r\n              itemTemplate = adlib(itemTemplate, settings);\r\n              // Deploy it\r\n              itemTemplate.fcns.deployItem(itemTemplate, settings, requestOptions, progressCallback)\r\n                  .then(function (itemClone) {\r\n                  clonedSolution.push(itemClone);\r\n                  runThroughChecklist();\r\n              }, function () { return reject({ success: false }); });\r\n          }\r\n          // -------------------------------------------------------------------------\r\n          // Use specified folder to hold the hydrated items to avoid name clashes\r\n          if (settings.folderId) {\r\n              runThroughChecklist();\r\n          }\r\n          else {\r\n              // Create a folder to hold the hydrated items to avoid name clashes\r\n              var folderName = (settings.solutionName || \"Solution\") + \" (\" + getTimestamp() + \")\";\r\n              var options = {\r\n                  title: folderName,\r\n                  authentication: requestOptions.authentication\r\n              };\r\n              createFolder(options)\r\n                  .then(function (createdFolderResponse) {\r\n                  settings.folderId = createdFolderResponse.folder.id;\r\n                  runThroughChecklist();\r\n              }, function () { return reject({ success: false }); });\r\n          }\r\n      });\r\n  }\r\n  /**\r\n   * Finds template by id in a list of templates.\r\n   *\r\n   * @param templates List of templates to search\r\n   * @param id AGOL id of template to find\r\n   * @return Matching template or null\r\n   */\r\n  function getTemplateInSolution(templates, id) {\r\n      var childId = getTemplateIndexInSolution(templates, id);\r\n      return childId >= 0 ? templates[childId] : null;\r\n  }\r\n  // -- Internals ------------------------------------------------------------------------------------------------------//\r\n  // (export decoration is for unit testing)\r\n  /**\r\n   * A parameterized server name to replace the organization URL in a Web Mapping Application's URL to\r\n   * itself; name has to be acceptable to AGOL, otherwise it discards the URL, so substitution must be\r\n   * made before attempting to create the item.\r\n   * @protected\r\n   */\r\n  var PLACEHOLDER_SERVER_NAME$1 = \"{{organization.portalBaseUrl}}\";\r\n  /**\r\n   * The portion of a Dashboard app URL between the server and the app id.\r\n   * @protected\r\n   */\r\n  var OPS_DASHBOARD_APP_URL_PART$1 = \"/apps/opsdashboard/index.html#/\";\r\n  /**\r\n   * The portion of a Webmap URL between the server and the map id.\r\n   * @protected\r\n   */\r\n  var WEBMAP_APP_URL_PART$1 = \"/home/webmap/viewer.html?webmap=\";\r\n  /**\r\n   * A visit flag used in the topological sort algorithm.\r\n   * @protected\r\n   */\r\n  var SortVisitColor;\r\n  (function (SortVisitColor) {\r\n      /** not yet visited */\r\n      SortVisitColor[SortVisitColor[\"White\"] = 0] = \"White\";\r\n      /** visited, in progress */\r\n      SortVisitColor[SortVisitColor[\"Gray\"] = 1] = \"Gray\";\r\n      /** finished */\r\n      SortVisitColor[SortVisitColor[\"Black\"] = 2] = \"Black\";\r\n  })(SortVisitColor || (SortVisitColor = {}));\r\n  /**\r\n   * Creates an empty template.\r\n   *\r\n   * @param id AGOL id of item\r\n   * @return Empty item containing supplied id\r\n   * @protected\r\n   */\r\n  function createPlaceholderTemplate(id) {\r\n      return {\r\n          itemId: id,\r\n          type: \"\",\r\n          key: \"\",\r\n          item: null\r\n      };\r\n  }\r\n  function getItemTemplateHierarchy(rootIds, requestOptions, templates) {\r\n      if (!templates) {\r\n          templates = [];\r\n      }\r\n      return new Promise(function (resolve, reject) {\r\n          if (typeof rootIds === \"string\") {\r\n              // Handle a single AGOL id\r\n              var rootId = rootIds;\r\n              if (getTemplateInSolution(templates, rootId)) {\r\n                  resolve(templates); // Item and its dependents are already in list or are queued\r\n              }\r\n              else {\r\n                  // Add the id as a placeholder to show that it will be fetched\r\n                  var getItemPromise = initItemTemplateFromId(rootId, requestOptions);\r\n                  templates.push(createPlaceholderTemplate(rootId));\r\n                  // Get the specified item\r\n                  getItemPromise\r\n                      .then(function (itemTemplate) {\r\n                      // Set the value keyed by the id, replacing the placeholder\r\n                      replaceTemplate(templates, itemTemplate.itemId, itemTemplate);\r\n                      // Trace item dependencies\r\n                      if (itemTemplate.dependencies.length === 0) {\r\n                          resolve(templates);\r\n                      }\r\n                      else {\r\n                          // Get its dependents, asking each to get its dependents via\r\n                          // recursive calls to this function\r\n                          var dependentDfds_1 = [];\r\n                          itemTemplate.dependencies.forEach(function (dependentId) {\r\n                              if (!getTemplateInSolution(templates, dependentId)) {\r\n                                  dependentDfds_1.push(getItemTemplateHierarchy(dependentId, requestOptions, templates));\r\n                              }\r\n                          });\r\n                          Promise.all(dependentDfds_1)\r\n                              .then(function () {\r\n                              resolve(templates);\r\n                          }, function () { return reject({ success: false }); });\r\n                      }\r\n                  }, function () { return reject({ success: false }); });\r\n              }\r\n          }\r\n          else if (Array.isArray(rootIds) && rootIds.length > 0) {\r\n              // Handle a list of one or more AGOL ids by stepping through the list\r\n              // and calling this function recursively\r\n              var getHierarchyPromise_1 = [];\r\n              rootIds.forEach(function (rootId) {\r\n                  getHierarchyPromise_1.push(getItemTemplateHierarchy(rootId, requestOptions, templates));\r\n              });\r\n              Promise.all(getHierarchyPromise_1)\r\n                  .then(function () {\r\n                  resolve(templates);\r\n              }, function () { return reject({ success: false }); });\r\n          }\r\n          else {\r\n              reject({ success: false });\r\n          }\r\n      });\r\n  }\r\n  /**\r\n   * Finds index of template by id in a list of templates.\r\n   *\r\n   * @param templates List of templates to search\r\n   * @param id AGOL id of template to find\r\n   * @return Id of matching template or -1 if not found\r\n   * @protected\r\n   */\r\n  function getTemplateIndexInSolution(templates, id) {\r\n      var baseId = deTemplatize(id);\r\n      return templates.findIndex(function (template) {\r\n          return baseId === deTemplatize(template.itemId);\r\n      });\r\n  }\r\n  /**\r\n   * Replaces a template entry in a list of templates\r\n   *\r\n   * @param templates Templates list\r\n   * @param id Id of item in templates list to find; if not found, no replacement is () => done()\r\n   * @param template Replacement template\r\n   * @return True if replacement was made\r\n   * @protected\r\n   */\r\n  function replaceTemplate(templates, id, template) {\r\n      var i = getTemplateIndexInSolution(templates, id);\r\n      if (i >= 0) {\r\n          templates[i] = template;\r\n          return true;\r\n      }\r\n      return false;\r\n  }\r\n  /**\r\n   * Topologically sort a Solution's items into a build list.\r\n   *\r\n   * @param items Hash of JSON descriptions of items\r\n   * @return List of ids of items in the order in which they need to be built so that dependencies\r\n   * are built before items that require those dependencies\r\n   * @throws Error(\"Cyclical dependency graph detected\")\r\n   * @protected\r\n   */\r\n  function topologicallySortItems(fullItems) {\r\n      // Cormen, Thomas H.; Leiserson, Charles E.; Rivest, Ronald L.; Stein, Clifford (2009)\r\n      // Sections 22.3 (Depth-first search) & 22.4 (Topological sort), pp. 603-615\r\n      // Introduction to Algorithms (3rd ed.), The MIT Press, ISBN 978-0-262-03384-8\r\n      //\r\n      // DFS(G)\r\n      // 1 for each vertex u ∈ G,V\r\n      // 2     u.color = WHITE\r\n      // 3     u.π = NIL\r\n      // 4 time = 0\r\n      // 5 for each vertex u ∈ G,V\r\n      // 6     if u.color == WHITE\r\n      // 7         DFS-VISIT(G,u)\r\n      //\r\n      // DFS-VISIT(G,u)\r\n      // 1 time = time + 1    // white vertex u has just been discovered\r\n      // 2 u.d = time\r\n      // 3 u.color = GRAY\r\n      // 4 for each v ∈ G.Adj[u]     // explore edge (u,v)\r\n      // 5     if v.color == WHITE\r\n      // 6         v.π = u\r\n      // 7         DFS-VISIT(G,v)\r\n      // 8 u.color = BLACK         // blacken u; it is finished\r\n      // 9 time = time + 1\r\n      // 10 u.f = time\r\n      //\r\n      // TOPOLOGICAL-SORT(G)\r\n      // 1 call DFS(G) to compute finishing times v.f for each vertex v\r\n      // 2 as each vertex is finished, insert it onto front of a linked list\r\n      // 3 return the linked list of vertices\r\n      var buildList = []; // list of ordered vertices--don't need linked list because\r\n      // we just want relative ordering\r\n      var verticesToVisit = {};\r\n      fullItems.forEach(function (template) {\r\n          verticesToVisit[template.itemId] = SortVisitColor.White; // not yet visited\r\n      });\r\n      // Algorithm visits each vertex once. Don't need to record times or \"from' nodes (\"π\" in pseudocode)\r\n      fullItems.forEach(function (template) {\r\n          if (verticesToVisit[template.itemId] === SortVisitColor.White) { // if not yet visited\r\n              visit(template.itemId);\r\n          }\r\n      });\r\n      // Visit vertex\r\n      function visit(vertexId) {\r\n          verticesToVisit[vertexId] = SortVisitColor.Gray; // visited, in progress\r\n          // Visit dependents if not already visited\r\n          var template = getTemplateInSolution(fullItems, vertexId);\r\n          var dependencies = template.dependencies || [];\r\n          dependencies.forEach(function (dependencyId) {\r\n              if (verticesToVisit[dependencyId] === SortVisitColor.White) { // if not yet visited\r\n                  visit(dependencyId);\r\n              }\r\n              else if (verticesToVisit[dependencyId] === SortVisitColor.Gray) { // visited, in progress\r\n                  throw Error(\"Cyclical dependency graph detected\");\r\n              }\r\n          });\r\n          verticesToVisit[vertexId] = SortVisitColor.Black; // finished\r\n          buildList.push(vertexId); // add to end of list of ordered vertices because we want dependents first\r\n      }\r\n      return buildList;\r\n  }\n\n  /*\r\n   | Copyright 2018 Esri\r\n   |\r\n   | Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   | you may not use this file except in compliance with the License.\r\n   | You may obtain a copy of the License at\r\n   |\r\n   |    http://www.apache.org/licenses/LICENSE-2.0\r\n   |\r\n   | Unless required by applicable law or agreed to in writing, software\r\n   | distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   | See the License for the specific language governing permissions and\r\n   | limitations under the License.\r\n   */\r\n  /**\r\n   * Gets a list of the top-level items in a Solution, i.e., the items that no other item depends on.\r\n   *\r\n   * @param items Solution to explore\r\n   * @return List of ids of top-level items in Solution\r\n   */\r\n  function getTopLevelItemIds(templates) {\r\n      // Find the top-level nodes. Start with all nodes, then remove those that other nodes depend on\r\n      var topLevelItemCandidateIds = templates.map(function (template) {\r\n          return template.itemId;\r\n      });\r\n      templates.forEach(function (template) {\r\n          (template.dependencies || []).forEach(function (dependencyId) {\r\n              var iNode = topLevelItemCandidateIds.indexOf(dependencyId);\r\n              if (iNode >= 0) {\r\n                  // Node is somebody's dependency, so remove the node from the list of top-level nodes\r\n                  // If iNode == -1, then it's a shared dependency and it has already been removed\r\n                  topLevelItemCandidateIds.splice(iNode, 1);\r\n              }\r\n          });\r\n      });\r\n      return topLevelItemCandidateIds;\r\n  }\r\n  /**\r\n   * Extracts item hierarchy structure from a Solution's items list.\r\n   *\r\n   * @param items Hash of JSON descriptions of items\r\n   * @return JSON structure reflecting dependency hierarchy of items; shared dependencies are\r\n   * repeated; each element of the structure contains the AGOL id of an item and a list of ids of the\r\n   * item's dependencies\r\n   */\r\n  function getItemHierarchy(templates) {\r\n      var hierarchy = [];\r\n      // Find the top-level nodes. Start with all nodes, then remove those that other nodes depend on\r\n      var topLevelItemIds = getTopLevelItemIds(templates);\r\n      // Hierarchically list the children of specified nodes\r\n      function itemChildren(children, accumulatedHierarchy) {\r\n          // Visit each child\r\n          children.forEach(function (id) {\r\n              var child = {\r\n                  id: id,\r\n                  dependencies: []\r\n              };\r\n              // Fill in the child's dependencies array with its children\r\n              var template = getTemplateInSolution(templates, id);\r\n              var dependencyIds = template.dependencies;\r\n              if (Array.isArray(dependencyIds) && dependencyIds.length > 0) {\r\n                  itemChildren(dependencyIds, child.dependencies);\r\n              }\r\n              accumulatedHierarchy.push(child);\r\n          });\r\n      }\r\n      itemChildren(topLevelItemIds, hierarchy);\r\n      return hierarchy;\r\n  }\r\n  /**\r\n   * Creates a Storymap from the Web Mapping Applications in a Solution.\r\n   *\r\n   * @param title Title of Storymap\r\n   * @param solution Solution to examine for content\r\n   * @param requestOptions Options for requesting information from AGOL\r\n   * @param orgUrl The base URL for the AGOL organization, e.g., https://myOrg.maps.arcgis.com\r\n   * @param folderId Id of folder to receive item; null/empty indicates that the item goes into the root folder\r\n   * @param access Access to set for item: 'public', 'org', 'private'\r\n   * @return Storymap item that was published into AGOL\r\n   */\r\n  function createSolutionStorymap(title, solution, requestOptions, orgUrl, folderId, access) {\r\n      if (folderId === void 0) { folderId = null; }\r\n      if (access === void 0) { access = \"private\"; }\r\n      return new Promise(function (resolve, reject) {\r\n          publishSolutionStorymapItem(createSolutionStorymapItem(title, solution, folderId), requestOptions, orgUrl, folderId, access)\r\n              .then(function (storymap) { return resolve(storymap); }, function () { return reject({ success: false }); });\r\n      });\r\n  }\r\n  // -- Internals ------------------------------------------------------------------------------------------------------//\r\n  // (export decoration is for unit testing)\r\n  /**\r\n   * Creates a Storymap AGOL item.\r\n   *\r\n   * @param title Title of Storymap\r\n   * @param solution Solution to examine for content\r\n   * @param folderId Id of folder to receive item; null/empty indicates that the item goes into the root folder\r\n   * @return Storymap AGOL item\r\n   * @protected\r\n   */\r\n  function createSolutionStorymapItem(title, solution, folderId) {\r\n      if (folderId === void 0) { folderId = null; }\r\n      // Prepare the storymap item\r\n      var item = getStorymapItemFundamentals(title);\r\n      var data = getStorymapItemDataFundamentals(title, folderId);\r\n      // Create a story for each top-level item\r\n      var topLevelItemIds = getTopLevelItemIds(solution);\r\n      var stories = data.values.story.entries;\r\n      topLevelItemIds.forEach(function (topLevelItemId) {\r\n          var solutionItem = getTemplateInSolution(solution, topLevelItemId);\r\n          if (solutionItem.item.url) {\r\n              var itsStory = getWebpageStory(solutionItem.item.title, solutionItem.item.description, solutionItem.item.url);\r\n              stories.push(itsStory);\r\n          }\r\n      });\r\n      var storymapItem = {\r\n          itemId: \"\",\r\n          type: item.type,\r\n          key: \"\",\r\n          item: item,\r\n          data: data\r\n      };\r\n      return storymapItem;\r\n  }\r\n  /**\r\n   * Generates the data section of a Storymap AGOL item.\r\n   *\r\n   * @param title Title of Storymap\r\n   * @param folderId Id of folder to receive item; null/empty indicates that the item goes into the root folder\r\n   * @return Storymap AGOL item's data section\r\n   * @protected\r\n   */\r\n  function getStorymapItemDataFundamentals(title, folderId) {\r\n      return {\r\n          \"source\": \"32f733be56ce48b5993932715e1070ee\",\r\n          \"folderId\": folderId,\r\n          \"values\": {\r\n              \"settings\": {\r\n                  \"layout\": {\r\n                      \"id\": \"accordion\"\r\n                  },\r\n                  \"layoutOptions\": {\r\n                      \"description\": true,\r\n                      \"legend\": \"dropdown\",\r\n                      \"panel\": {\r\n                          \"position\": \"left\",\r\n                          \"size\": \"medium\"\r\n                      },\r\n                      \"numbering\": true,\r\n                      \"reverse\": false\r\n                  },\r\n                  \"theme\": {\r\n                      \"colors\": {\r\n                          \"name\": \"accordion-org\",\r\n                          \"accordionNumber\": \"#004da8\",\r\n                          \"accordionTitle\": \"#004da8\",\r\n                          \"accordionArrowActive\": \"#004da8\",\r\n                          \"accordionArrow\": \"rgba(0, 77, 168, 0.6)\",\r\n                          \"accordionArrowHover\": \"rgba(0, 77, 168, 0.8)\",\r\n                          \"group\": \"org\",\r\n                          \"themeMajor\": \"black\",\r\n                          \"header\": \"#999999\",\r\n                          \"headerText\": \"#242424\",\r\n                          \"headerTitle\": \"#242424\",\r\n                          \"panel\": \"#ebebeb\",\r\n                          \"text\": \"#474747\",\r\n                          \"textLink\": \"#004da8\",\r\n                          \"media\": \"#eee\",\r\n                          \"mapControls\": \"#ebebeb\",\r\n                          \"softText\": \"#474747\",\r\n                          \"softBtn\": \"#474747\",\r\n                          \"esriLogo\": \"black\",\r\n                          \"esriLogoMobile\": \"black\"\r\n                      }\r\n                  },\r\n                  \"appGeocoders\": [{\r\n                          \"singleLineFieldName\": \"SingleLine\",\r\n                          \"name\": \"ArcGIS World Geocoding Service\",\r\n                          \"url\": \"https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer\"\r\n                      }]\r\n              },\r\n              \"title\": title,\r\n              \"story\": {\r\n                  \"storage\": \"WEBAPP\",\r\n                  \"entries\": []\r\n              },\r\n              \"template\": {\r\n                  \"name\": \"Map Series\",\r\n                  \"createdWith\": \"1.13.0\",\r\n                  \"editedWith\": \"1.13.0\"\r\n              }\r\n          },\r\n          \"_ssl\": null\r\n      };\r\n  }\r\n  /**\r\n   * Generates the base section of a Storymap AGOL item.\r\n   *\r\n   * @param title Title of Storymap\r\n   * @return Storymap AGOL item's base section\r\n   * @protected\r\n   */\r\n  function getStorymapItemFundamentals(title) {\r\n      if (title === void 0) { title = \"\"; }\r\n      return {\r\n          \"itemType\": \"text\",\r\n          \"name\": null,\r\n          \"title\": title,\r\n          \"type\": \"Web Mapping Application\",\r\n          \"typeKeywords\": [\"JavaScript\", \"layout-accordion\", \"Map\", \"Mapping Site\", \"mapseries\", \"Online Map\",\r\n              \"Ready To Use\", \"selfConfigured\", \"Story Map\", \"Story Maps\", \"Web Map\"],\r\n          \"tags\": [\"Solutions\"],\r\n          \"commentsEnabled\": false\r\n      };\r\n  }\r\n  /**\r\n   * Generates a Storymap page.\r\n   *\r\n   * @param title Title of Storymap page\r\n   * @param description Body text of Storymap page\r\n   * @param url URL to web page to embed in the Storymap page\r\n   * @return Storymap page JSON\r\n   * @protected\r\n   */\r\n  function getWebpageStory(title, description, url) {\r\n      return {\r\n          \"title\": title,\r\n          \"contentActions\": [],\r\n          \"creaDate\": 1542325264964,\r\n          \"status\": \"PUBLISHED\",\r\n          \"media\": {\r\n              \"type\": \"webpage\",\r\n              \"webpage\": {\r\n                  \"url\": url,\r\n                  \"type\": \"webpage\",\r\n                  \"altText\": \"\",\r\n                  \"display\": \"stretch\",\r\n                  \"unload\": true\r\n              }\r\n          },\r\n          \"description\": \"<p>\" + description + \"</p>\\n\"\r\n      };\r\n  }\r\n  /**\r\n   * Creates a Storymap item describing the top-level webpages forming the solution.\r\n   *\r\n   * @param solutionStorymap Storymap AGOL item; item is modified\r\n   * @param requestOptions Options for requesting information from AGOL\r\n   * @param orgUrl The base URL for the AGOL organization, e.g., https://myOrg.maps.arcgis.com\r\n   * @param folderId Id of folder to receive item; null indicates that the item goes into the root\r\n   * folder\r\n   * @param access Access to set for item: 'public', 'org', 'private'\r\n   * @return A promise that will resolve with an updated solutionStorymap reporting the Storymap id\r\n   * and URL\r\n   * @protected\r\n   */\r\n  function publishSolutionStorymapItem(solutionStorymap, requestOptions, orgUrl, folderId, access) {\r\n      if (folderId === void 0) { folderId = null; }\r\n      if (access === void 0) { access = \"private\"; }\r\n      return new Promise(function (resolve, reject) {\r\n          createItemWithData(solutionStorymap.item, solutionStorymap.data, requestOptions, folderId, access)\r\n              .then(function (createResponse) {\r\n              // Update its app URL\r\n              var solutionStorymapId = createResponse.id;\r\n              var solutionStorymapUrl = orgUrl + \"/apps/MapSeries/index.html?appid=\" + solutionStorymapId;\r\n              updateItemURL(solutionStorymapId, solutionStorymapUrl, requestOptions)\r\n                  .then(function (response) {\r\n                  solutionStorymap.item.id = solutionStorymapId;\r\n                  solutionStorymap.item.url = solutionStorymapUrl;\r\n                  resolve(solutionStorymap);\r\n              }, function () { return reject(); });\r\n          }, function () { return reject(); });\r\n      });\r\n  }\n\n  /*\r\n   | Copyright 2018 Esri\r\n   |\r\n   | Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   | you may not use this file except in compliance with the License.\r\n   | You may obtain a copy of the License at\r\n   |\r\n   |    http://www.apache.org/licenses/LICENSE-2.0\r\n   |\r\n   | Unless required by applicable law or agreed to in writing, software\r\n   | distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   | See the License for the specific language governing permissions and\r\n   | limitations under the License.\r\n   */\n\n  exports.createSolution = createSolution;\n  exports.publishSolution = publishSolution;\n  exports.getEstimatedDeploymentCost = getEstimatedDeploymentCost;\n  exports.deploySolution = deploySolution;\n  exports.getTemplateInSolution = getTemplateInSolution;\n  exports.PLACEHOLDER_SERVER_NAME = PLACEHOLDER_SERVER_NAME$1;\n  exports.OPS_DASHBOARD_APP_URL_PART = OPS_DASHBOARD_APP_URL_PART$1;\n  exports.WEBMAP_APP_URL_PART = WEBMAP_APP_URL_PART$1;\n  exports.getItemTemplateHierarchy = getItemTemplateHierarchy;\n  exports.replaceTemplate = replaceTemplate;\n  exports.topologicallySortItems = topologicallySortItems;\n  exports.getTopLevelItemIds = getTopLevelItemIds;\n  exports.getItemHierarchy = getItemHierarchy;\n  exports.createSolutionStorymap = createSolutionStorymap;\n  exports.createSolutionStorymapItem = createSolutionStorymapItem;\n  exports.getStorymapItemFundamentals = getStorymapItemFundamentals;\n  exports.publishSolutionStorymapItem = publishSolutionStorymapItem;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=arcgis-clone.umd.js.map\n\n\n//# sourceURL=webpack://arcgis_clone_js/./dist/umd/arcgis-clone.umd.js?");

/***/ })

/******/ });